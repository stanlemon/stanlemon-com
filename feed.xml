<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lemonbytes by Stan Lemon</title>
    <description>husband, dad, steelers fan and software engineer</description>
    <link>https://stanlemon.com/</link>
    <atom:link href="https://stanlemon.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>2013-03-10T23:46-04:00</pubDate>
    <lastBuildDate>2013-03-10T23:46-04:00</lastBuildDate>
    <generator>stanlemon.com</generator>
    
      <item>
        <title>The Donut Fairy</title>
        <description><p>Evelyn is the household donut connoisseur. She’s the one responsible for getting me out of bed early to go get donuts, and she also usually decides where to get the donuts. She’ll tell you the best donuts in Indianapolis are at Long’s Bakery, but that Jack’s Donuts is closer; and if you want one of the cinnamon twists they’re bigger at Jacks, but Long’s has the better cake donuts. She’s got it all down; this is her thing.</p>
<p>One day Henry (age 8) is sitting back watching reruns of the epic show Myth Busters on Hulu. This is one of the few shows we watch that has ads. Evelyn, his little sister (age 6), is his sidekick and was happily sitting at his side watching Myth Busters when an ad for Dunkin Donuts came up. I can count the number of times Evelyn has had donuts from Dunkin on both hands, it’s maybe 7. Only one of those occurred in Indianapolis, the others were at Grandma Lemon’s house during a visit and a few times on the road when Mom &amp; Dad needed coffee.</p>
<p>I was sitting on the deck reading when the Dunkin Donuts ad popped up, and Evelyn rushed outside to tell me about. She told me we could get free donuts, the TV said so. She was excited and rambling a bit and also mentioned something about dashing. It took me a bit, but I figured out that the ad was talking about Door Dash.</p>
<p>Maybe this is a good time to explain that in Evelyn’s 6 long years of life we’ve had food delivered to our house exactly one time. It was right after we moved to Indianapolis, on day 2, and we ordered pizza from Donatos. The kids declared it a disaster and to this day when I mention it they don’t recall it, the scar of bad pizza having been blocked out due to the trauma of the whole thing.</p>
<p>So Evelyn has no idea what Door Dash is, but this hasn’t registered in my brain yet, but I cautioned her that this likely was too far away to work for us. She nodded and went along, insisting that I check. I installed the Door Dash app, having never used it before, created an account and checked Dunkin Donuts’ availability to our home. We live in a relatively new part of Indy and there are a number of things that don’t deliver to our area (like Drizzly) and I assumed that would be the case because Dunkin Donuts is not exactly close (~9 miles). Well sure enough, Dunkin Donuts delivered to our home and the ad that Evelyn saw was the first thing to pop up.</p>
<p>I committed to Evelyn then and there that I would get donuts in the morning, including the 25 free donut holes. Her job was to wake me up in the morning and say “Dunking Donuts” so that I remembered. Thus the deal was closed.</p>
<p>The next morning Evelyn got up a little earlier than usual, snuck into our master bedroom, crept up alongside my side and in the creepiest voice possible said, “DUNKIN DONUTS.” I pulled up the app on my phone and I started to place an order. This all seemed fairly routine, but now I needed to get ready. Evelyn got dressed and waited while I showered. When I came out she looked very nervous, “Daddy, you took a long time, we gotta go get the donuts.” At this point I smiled, “But honey they’re already here.” “What?!?!? How?!?” I then showed Evelyn a picture of them on our front doorstep that had been sent to me by the Door Dash driver, and she bolted downstairs. Mrs. Lemon had already moved them inside.</p>
<p>This was a truly mind blowing event for Evelyn. Donuts could be delivered?!? To our house?!? How is this possible??? Of course, there’s only one answer and I shared it with Evelyn: <strong>The Donut Fairy.</strong></p>
<p>Technology is pretty cool.</p>
</description>
        <pubDate>Mon Sep 21 2020 01:20:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2020/09/20/the-donut-fairy/</link>
        <guid isPermaLink="true">https://stanlemon.com/2020/09/20/the-donut-fairy/</guid>
        
      </item>
    
      <item>
        <title>Red Sauce for Pizza, Spaghetti and Other Pasta</title>
        <description><p>When I made my <a href="/2020/04/19/pizza-night-at-the-lemons/">Pizza Night at the Lemon's</a> post and video I mentioned I would share my red sauce (aka &quot;pizza&quot; sauce) recipe shortly thereafter. Well, here it is!  This recipe came about due to the difficulties my wife and I had finding a good pizza sauce for our pizza. Prior to this recipe we also never ate pasta, for similar reasons. It seemed like whenever we found a good sauce we would snatch up as much as the grocery store had and then it would disappear after that, leaving us to experiment and find a different brand.  Finally we were doing a stint with Blue Apron and came across a <a href="https://www.blueapron.com/recipes/three-cheese-calzones-with-broccoli-rabe-broccolini-tomato-sauce">Calzone recipe</a> that had a rather delightful sauce to it.  Blue Apron ships their seasoning packets already measured so we didn't know the composition other than the unknown aleppo pepper and italian seasoning (typically oregano, basil and rosemary). So we set out to reproduce this sauce, along with some modifications and came up with what follows. This is our red sauce, we use it for pizza, spaghetti and any other pasta dish we put together. The batch here is more then you need for pizza night, so you can either save the extra for next week or freeze it if you like, we've done both! Enjoy!</p>
<hr>
<div class="text-center">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/RP_Yu2fP_I4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div>
<br />
<h3>Ingredients:</h3>
<ul>
<li>1lb 12oz can of crushed tomatoes</li>
<li>2 tablespoons olive oil (or enough to cover the bottom of the pan)</li>
<li>8 fresh garlic cloves</li>
<li>1/2 teaspoon <a href="(https://amzn.to/2SsCdea)">aleppo pepper</a></li>
<li>1 teaspoon dry basil</li>
<li>1 teaspoon dry oregano</li>
<li>1/4 teaspoon sugar</li>
<li>1/4 teaspoon salt</li>
<li>1/4 teaspoon black pepper</li>
</ul>
<p><em>If you don't have aleppo pepper that's ok, just skip it, <a href="https://amzn.to/2SsCdea">but consider ordering some for your spice cabinet</a>.</em></p>
<h4>Optional:</h4>
<ul>
<li>Dash of cayenne pepper</li>
<li>1/4 teaspoon <a href="https://amzn.to/369n5bh">ground fennel</a></li>
</ul>
<h3>Directions</h3>
<p>Begin with a medium sized pot, like 2.5 Quarts, pour about 2 tablespoons of olive oil into it, or enough to provide nice coverage over the bottom of the hot. Heat on medium.  You'll know when the oil is hot enough because if you flick a drop of water at it, it will pop.</p>
<p>One the oil is hot take 8 cloves of freshly minced garlic and place into the oil. If you do not have fresh garlic you can use pre-minced garlic, and figure about two heaping teaspoons.</p>
<p>Let the garlic fry up for about about a minute or just until it turns golden brown.  Make sure you're constantly stirring it around while it fries.</p>
<p>Add 1/2 teaspoon of aleppo pepper, 1 teaspoon dry oregano and 1 teaspoon dry basil into the hot oil and fried garlic, stirring in continuously for about 30 seconds or when the oregano and basil begin to toast.</p>
<p>Add 1lb 12oz of crushed tomatoes (1 big can) to the hot oil, fried garlic and spices slowly so that it doesn't splatter back at you, stirring vigorously. Add 1/4 teaspoon sugar, 1/4 teaspoon salt, 1/4 teaspoon black pepper and optionally a dash of cayenne pepper, and a 1/4 teaspoon of ground fennel.  Stir continuously for about 4 minutes, or until the sauce has been heated through.  You'll know it's heated when the sauce begins to pop.</p>
<p>Remove from heat and let it cool before applying to a pizza, or if serving with Pasta apply immediately. You can smooth the sauce out with an immersion blender, which might be desirable for certain dishes.</p>
</description>
        <pubDate>Sun May 17 2020 19:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2020/05/17/red-sauce-for-pizza-spaghetti-and-other-pasta/</link>
        <guid isPermaLink="true">https://stanlemon.com/2020/05/17/red-sauce-for-pizza-spaghetti-and-other-pasta/</guid>
        
      </item>
    
      <item>
        <title>Pizza Night at the Lemon's</title>
        <description><p>As long as my wife and I have been married we've been making our own pizza, every Friday night. I grew up in a suburb of Chicago where pizza and Friday nights were pretty much synonymous. Ordering pizza from your local parlour was just what you did. For my family most Fridays we ordered pizza from Campagna's, which made a crispy and often very salty thin crust. Later in life we'd frequent Dominick's and then <a href="https://www.paljoeys.com">Pal Joey's</a>, which sadly is the only one of these restaurants still in business today.</p>
<p>It often surprises people to learn that even as a Chicago suburbanite, the pizza which you are most likely to associate with our fair city was not what I grew up on.  The flakey and buttery goodness of Chicago style deep dish that places like <a href="https://giordanos.com">Giordiano's</a> and <a href="https://www.ginoseast.com">Gino's East</a> made so popular was not something we ate regularly. In fact, in my hometown I don't even know of a place that served that style of pizza when I was growing up.  Chicago style pizza is far more diverse than the casserole-like pies where the sauce decorates the top, in fact it's the thinner version of Chicago style pizza that I grew up on every Friday night and still continue to love. Now don't get me wrong, deep dish is fantastic, that's just not the purpose of this post today.</p>
<p>When my wife Sara and I got married we immediately moved to the Northern side of Pittsburgh, where she started a new job. That first Friday together as a married couple I was left with an empty and hollow feeling as we struggled to find a pizza place for dinner. There's a place called Fox's Pizza that's pretty popular, but nothing about about it tasted right. For the first time in my life I didn't enjoy pizza night.  So we did what any young couple would do during a culinary crisis and we decided to make our own.</p>
<p>Sara used a recipe right out of the Kitchen Aid Mixer recipe book, and for years it was good enough. We struggled to find good sauce, but for awhile the local Shop'n Save had the best we could find, until they didn't. When we finally moved to Indiana I took up bread baking as a hobby and thus unleashed a series of experiments in pizza making to find the right process, ingredients and recipe for the pizza I wanted to eat. The experimentation became so intense that one week our family ate pizza every night of the week, each a different recipe. What I ultimately found was that no single recipe accomplished the texture and flavor I wanted, so eventually I started experimenting with ingredients and ratios.</p>
<p>Almost five years later pizza night is as much a tradition in our family as it was in mine at my folk's home in West Chicago; the only difference is that I make my pizza from scratch. It starts before lunch time when I mix up the dough, and concludes right after I'm done with work as I hand stretch and assemble our pizza. For a long time many of my friends have asked me to share my recipe, which is honestly quite simple. The process is more nuanced though, and as many times as I've tried to write it down nothing would do it justice quite like a video. So here we are. I am happy to share a complete walk through of the Lemon family pizza recipe. I hope you'll give it a shot at home, and I hope this video helps you out.</p>
<hr>
<div class="text-center">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/_UL-A-Gvlr8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div>
<br />
<p>For this recipe you're going to need a scale, because all of my measurements are by weight. Weighing any recipe that you're baking guarantees consistency. When you measure by volume its easy to throw off the ratio of flour and water and that can really change how things come out.  So if you don't have a digital scale at home, <a href="https://amzn.to/3aw7Qd2">do yourself a solid and order one</a>, they're inexpensive and super valuable when baking.</p>
<p>I use a mixer to combine my ingredients, but you can absolutely do this by hand too. Combine all of the ingredients and work them together until you have a smooth dough. In my Kitchen Aide mixer I start at speed 1 for 1-2 minutes and then increase it to speed 2 for another 6-8 minutes. In total you're going to mix the dough for 8-10 minutes, but the important thing is the texture. If you're doing this by hand, try not to add too much additional flour from your work service to the dough. Gently work it, folding the dough over itself again and again until you get a smooth and consistent dough.</p>
<h3>Ingredients:</h3>
<ul>
<li>Active Yeast 9g</li>
<li>Water 372g</li>
<li>Olive Oil 18g</li>
<li>00 Flour 300g</li>
<li>All Purpose Flour 300g</li>
<li>Salt 12g</li>
</ul>
<p><em>See notes below for additional information on ingredients.</em></p>
<h3>Directions</h3>
<p>After you've combined the ingredients, divide the dough into two even balls. I used my scale to weigh them and make sure they're equal. Then place the dough balls onto a lightly floured plate, cover it with plastic wrap and place it into your fridge for 5-8 hours. During this time the dough will rise, but thanks to the refrigeration it'll rise a little bit slower and develop a richer flavor profile.</p>
<p>When it's cooking time start your oven at the hottest temperature you can set it to. In my house this is 550 degrees. If you have a baking stone or <a href="https://shop.bakingsteel.com/collections/steels/products/baking-steel-3-8">baking steel</a>, put it in the over before you turn it on.  You're going to want to let you oven warm for about an hour to make sure everything is as hot as you can get it. I'm a big fan of the baking steel, as it concentrates heat in your oven far better than a baking stone does. Bottom line is you want something super hot to slide your pizza on to.</p>
<p>After your oven has been heated for about an hour, take the dough out of the fridge. I like to give it 10 minutes or so to adjust to room temperature. Remove the plastic wrap, lightly flour the top and bottom (I like to use Semolina for the bottom) and begin hand stretching the dough by passing it from one hand to the other and letting gravity do the hard work. If you've never seen this technique before, check out the video.</p>
<p>Once your dough is stretched and shaped begin assembly. <em>I have sauce recipe I make from scratch that I'll share in a future video and post.</em> I use just mozzarella cheese on the top. You can try other cheeses, but remember I'm going for the pizza I grew up with in Chicago and on the thin crusts that's mozzarella (deep dish aficionados will recall that provolone is common in those recipes).</p>
<p>Transfer your pizza into your hot 550 degree oven and set a timer for 6 minutes. Your pizza will be done when that mozzarella begins to blister (the slightly brown glorious crunchiness that forms when cheese is cooked in the oven).  Pull the pizza out, transfer to a cooling rack and wait 5 minutes before cutting. Then enjoy!</p>
<p>When cutting a pizza I'm a big fan of the <a href="https://amzn.to/2x5SRc0">Kitchy</a> which is sharp, easy to use and a breeze to clean.</p>
<h3>Notes</h3>
<ul>
<li>I highly recommend <a href="https://shop.kingarthurflour.com/items/saf-red-instant-yeast-16-oz">Saf Instant yeast</a>, this stuff just works. If you have Fleischman's that's ok, but next time you're out shopping keep an eye out for Saf.</li>
<li><a href="https://amzn.to/3bI2rRG">00 flour</a> is what gives my pizza that pizza-parlour smell and flavor that is so distinct from other flour. It's highly refined and finely milled Italian flour, often used in making pasta, but really puts your pizza over the top.</li>
<li>I love <a href="https://shop.kingarthurflour.com/items/king-arthur-unbleached-all-purpose-flour-5-lb">King Arthur's All Purpose Flour</a>, most grocery stores sell this.</li>
<li>If you don't have or can't find 00 flour that's OK, you can substitute all purpose or bread flour. It'll taste different, but it won't be bad.</li>
<li>If you want to try something different, substitute the all purpose flour with 00 flour. You'll find the pizza to be a bit more chewy, so your mileage may vary.</li>
<li>Using bread flour in place of all purpose flour is totally fine, it'll produce a chewier crust generally.</li>
<li>I recommend using kosher salt, but if you don't have any normal table salt is fine too.</li>
<li>For a little bit of extra flavor you can add 3g of garlic powder directly to the dough. Most of the time I do this.</li>
<li>I recommend having some <a href="https://amzn.to/3cX82np">Semolina flour</a> on hand for the underside of your dough, it's coarser and will help you move the dough from your work surface into the oven.</li>
</ul>
</description>
        <pubDate>Sun Apr 19 2020 17:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2020/04/19/pizza-night-at-the-lemons/</link>
        <guid isPermaLink="true">https://stanlemon.com/2020/04/19/pizza-night-at-the-lemons/</guid>
        
      </item>
    
      <item>
        <title>What the last episode of Seinfeld and the flu have in common</title>
        <description><p>After nine seasons 76 million people tuned into watch the last episode of the TV Show Seinfeld. That episode was a profound middle finger to the audience of Seinfeld, basically telling every dedicated fan that after all those years the show was pointless. It was an extremely polarizing episode, some loved it, some hated it. But 76 million viewers! Do you ever wonder how they came up with that number? Did NBC have some magical way of tracking every TV with a wire or antenna that tuned in for the finale? No, they did not. Instead they used statistical sampling to come up with that number. This is how most ratings and viewership &quot;estimates&quot; work; a company like Nielsen polls a set of people who are representative of the total viewership, and then they multiply it out. If you sample 1000 people, which is supposed to represent a 100 million human beings, you’re going to multiply it by 100,000 to get your best guess at the actual number of viewers. This sort of estimation in statistical analysis is hugely important in understanding what’s going on today with numbers about viruses like the flu and the novel coronavirus.</p>
<p>Let’s take a look at influenza. You might have heard of some of these numbers: During the 2018 - 2019 season, 34,200 died from influenza in the United States. Meanwhile, as I write this on April 19, 2020, <a href="https://coronavirus.jhu.edu/map.html">Johns Hopkins</a> is reporting 39,090 deaths from the novel coronavirus in the United States. Ok, so at first glance perhaps the novel coronavirus is marginally worse than the flu, but is that an accurate statement?</p>
<p>A number is only as good to you as your understanding of where it came from. It’s like Seinfeld and the 76 million people who tuned in for what many (not me) have argued is one of the worse finales to a TV show ever aired. We already know that 76 million people were not polled about Seinfeld, and the same is actually true of the 34,200 deaths from the flu in the United States. This 34,200 number comes from the <a href="https://www.cdc.gov/flu/about/burden/2018-2019.html">Center for Disease Control’s website</a>, and a lot of people miss <a href="https://www.cdc.gov/flu/about/burden/how-cdc-estimates.htm">the methodology the CDC used for coming up with this number</a>. If you click a little deeper into the site and read further you’ll see that the CDC uses a tool to estimate total deaths from reported deaths.[^1] <a href="https://onlinelibrary.wiley.com/doi/full/10.1111/irv.12486">Here’s their summary to the method</a>:</p>
<blockquote>
<p>We used routinely collected surveillance data, outbreak field investigations, <strong>and proportions of people</strong> seeking health care from survey results to <strong>estimate</strong> the number of illnesses, medical visits, hospitalizations, <strong>and deaths</strong> due to influenza during six influenza seasons (2010‐2011 through 2015‐2016). <em>(emphasis mine)</em></p>
</blockquote>
<p>Let’s take a closer look at these numbers for the state I live in, Indiana.  For the 2018 - 2019 season <a href="https://www.cdc.gov/nchs/pressroom/sosmap/flu_pneumonia_mortality/flu_pneumonia.htm">Indiana had 1,118 deaths from influenza</a> according to the CDC. It’s important to remember that the CDC does not actually do these tests in each state, rather they get their data from state health departments like the Indiana State Department of Health (ISDH). ISDH reports to the CDC actual tests each week, and <a href="https://www.in.gov/isdh/22104.htm">you can view these reports online</a>. If you look at <a href="https://www.in.gov/isdh/files/Weekly%20Influenza%20Report-Week%2020-2018-2019.pdf">the last report of the flu season</a>, which stretches from October to May, you’ll see that there were 113 reported influenza deaths. These are deaths with actual lab tests confirming that the individual who died had influenza. At the same time though, the CDC reports an estimate of 1,118 flu deaths in Indiana, which is derived from the 113 tested deaths reported by Indiana’s health department using the method they described above. Remember, 113 is the confirmed test number (like Nielsen’s sampling of the viewership for the Seinfeld finale), and 1,118 is an estimate (like the 76 million viewers that tuned into the Seinfeld finale).</p>
<p>Most news sources are relying on data from <a href="https://coronavirus.jhu.edu/map.html">Johns Hopkins</a> (which uses CDC data) to report the number of deaths from the novel coronavirus in the United States. The data in these numbers are from confirmed lab tests of people who have died from the novel coronavirus. These are not estimates. So when you want to compare the flu and the novel coronavirus in Indiana, the 1,118 estimated deaths from the 2018 - 2019 flu season is not the right number to compare to <a href="https://www.in.gov/coronavirus/">Indiana’s current 562 confirmed deaths from the novel coronavirus</a>[^2], the 113 number is. Comparing 113 flu deaths to 562 novel coronavirus deaths is comparing confirmed lab tests against confirmed lab tests.</p>
<p>But of course it’s more complicated than that. Notice I’m not referencing the 2019 - 2020 flu numbers. The reason for this is that this year’s flu season is not actually over. Just like the novel coronavirus season, we’re in the middle of it so our confirmed tests are incomplete. They’re going to grow tomorrow and the next day and the day after that until the season for this virus concludes. Right now we don’t know how long that is, but we know that the 113 confirmed deaths spanned a 7 month window while the 562 novel coronavirus deaths only span about 2 months.</p>
<p>The estimated deaths from the flu of 1,118 were just under 10x higher than the confirmed deaths of 113. I have no way of knowing if that multiple will hold true for the novel coronavirus. I hope not. We’re certainly testing far more people for the novel coronavirus than we do for the flu. We won’t know estimated deaths until this virus has run its full course and the CDC can work up a methodology and complete their research. For the time being all we can do is compare confirmed tests, and those are certainly higher. The important thing here is to remember that you have to be comparing the right numbers. If those numbers are not sourced the same way then you can’t simply say one is worse because the number is higher.</p>
<p>None of this is intended to scare you. It’s intended to help you understand why statements like &quot;we lose more people from the seasonal flu&quot;[^3] are, at best, a misunderstanding of the underlying numbers and how we got them. I think it’s fair to say that the number of confirmed tests show that the novel coronavirus has a higher mortality rate than the flu. How much higher remains to be seen, and we probably won’t know until this is all over. Until that day, stay safe, please.</p>
<hr>
<p>This mathematical “revelation” is not new or original, but I chose to write this after seeing friends and close family compare the flu and novel coronavirus. If you want a longer and more sophisticated analysis of the number conundrum check out this piece from late March in The Washington Post titled, <a href="https://www.washingtonpost.com/politics/2020/03/27/those-covid-19-death-toll-figures-are-incomplete/">“Those covid-19 death figures are incomplete”</a>. Just make sure you read the article in its entirety, please.</p>
<hr>
<p><em>Disclaimer: I am not a epidemiologist, nor a health care worker, nor a scientist. My only qualifications are that I can read and I once took a statistics class in High School. The best thing you, dear reader, can do, is to do your own research, and learn how these numbers are made yourself.</em></p>
<hr>
<p><em>Footnotes:</em></p>
<p>[^1]: If you're wondering why the CDC reports an estimate rather than just raw test data think back to the last time you had the flu, or the time before that. Did you make it to the doctor? If you did, did they test you? The flu is common enough that many of us have had it a few times and we didn't necessarily get tested each time to confirm it. Doctor visits and tests both cost money and they can curb the decisions that we make, especially during seasons when the flu may not be as bad. Factor in those without health insurance or even those who are naturally averse to visiting the doctor (like my friend <a href="http://jonkohlmeier.net">Jon</a>) and the confirmed tests really only show us a portion of the picture. This is ultimately why the CDC does research beyond confirmed tests to come up with a more accurate representation of the impact of the flu on the United States. Even if the CDC wanted a 100% confirmed number they couldn't pull it off, it's just too hard to do in a country of 328 million people. It's the same challenge a company like Nielsen is trying to figure out how many people tuned in for the Seinfeld finale.</p>
<p>[^2]: This number is current as of 4/19/2020, and if you read this anytime after the day I published this article it will be wrong. This is really amazing when you stop and think about it. Prior to the novel coronavirus the state of Indiana reported stats for the flu weekly in a PDF. They had a fancy table, but that was really it. The novel coronavirus has forced state health departments like ISDH to step up their analytics game in a big way, now giving daily updates with all sorts of data segments to analyze. This is great, but it also factors into the challenge we face with data right now as so many media outlets historically have reported estimates rather than raw data.</p>
<p>[^3]: <a href="https://twitter.com/AmeliaPakHarvey/status/1251627911108575233">Robert Hall of Bloomington, IN on 4/18/20</a>, recorded by <a href="https://www.indystar.com">IndyStar</a> reporter <a href="https://twitter.com/AmeliaPakHarvey">Amelia Pak-Harvey</a>.</p>
</description>
        <pubDate>Sun Apr 19 2020 17:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2020/04/19/what-the-last-episode-of-seinfeld-and-the-flu-have-in-common/</link>
        <guid isPermaLink="true">https://stanlemon.com/2020/04/19/what-the-last-episode-of-seinfeld-and-the-flu-have-in-common/</guid>
        
      </item>
    
      <item>
        <title>Budgeting the NFLPA Way</title>
        <description><p>Lately I’ve been writing a lot about personal finance, especially topics related to budgeting. Lots of people think we’re on the verge of a recession, but my eyes have been set solely on the NFL, where my favorite team, the Pittsburgh Steelers, are gearing up for a run at another Lombardi. I love football, and the idea of a players' strike is entirely disconcerting to me. So while the finance world is worrying about a recession, I’m worried about whether or not the 2021 season will get played.</p>
<p>CBS Sports posted an article this week citing communication from the NFL Players Association (via ESPN) and in it were ten <em>recommendations</em> for the players as they <em>budget</em> for a strike. At first I laughed, but then I thought hey these are actually pretty good (even the outlandish ones). Here are the ten items from <a href="https://www.cbssports.com/nfl/news/nflpa-reportedly-sends-work-stoppage-guide-to-players-preps-for-possible-lockout/">that post on CBS Sports</a>:</p>
<ol>
<li>Save at least half of each paycheck, if not more. If your current expenses are too high to save this much, you should look at ways to change your spending habits and reduce financial commitments.</li>
<li>Try cooking at home instead of eating out as much.</li>
<li>Designate one day a week as &quot;no spending day.&quot;</li>
<li>Take care of major home repairs now.</li>
<li>If you're in the market for a new home, consider renting instead of buying for now.</li>
<li>Find renters for your unoccupied homes or bedrooms.</li>
<li>Consider selling a car you have not driven in the past six months.</li>
<li>Avoid signing a long-term lease on any rental property that you rarely use.</li>
<li>Learn to say &quot;no&quot; -- or at least, &quot;not now&quot; -- to friends and family asking for money.</li>
<li>Consider selling clothes you have not worn in a year on Poshmark, Thredup or Tradesy.</li>
</ol>
<p>Some of these seem ridiculous to the average Joe, like &quot;<em>Consider selling a car you have not driven in the past six months.</em>&quot;. Do normal people just have extra cars lying around? I think we might be surprised how many do!</p>
<p>Here's the gist of these talking points: Consider having less stuff, but whatever you do, don't spend <strong>all</strong> of your money!</p>
<p>This seems like it would be really hard to do for an NFL player with a deal yielding several million dollars a year, but NFL players are no more immune to the urge to <em>spend what we have</em> than the blue collar factory worker or the software engineer with a blog.</p>
<p>There's wisdom here amongst the absurdity. Eating out, buying more clothes than you can wear, over mortgaging yourself, these are all normal people problems. We need to plan for the good times as well as the bad. Not everyone can set aside half of their monthly paycheck, but they can set aside something. As the economy's future becomes less and less certain I find this advice from the NFLPA very timely and much more widely applicable.</p>
<p>That said, I hope there's a 2021 Steelers season!</p>
</description>
        <pubDate>Sat Aug 17 2019 17:17:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2019/08/17/budgeting-the-nfpla-way/</link>
        <guid isPermaLink="true">https://stanlemon.com/2019/08/17/budgeting-the-nfpla-way/</guid>
        
      </item>
    
      <item>
        <title>How We Paid Off Our Mortgage</title>
        <description><img src="https://stanlemon.com/assets/mortgage-paid.jpg" srcset="https://stanlemon.com/assets/mortgage-paid.jpg, https://stanlemon.com/assets/mortgage-paid@2x.jpg 2x" alt="Mrs. Lemon and I standing in front of our home with our mortgage visualization fully colored in because we had just paid the mortgage off." class="post-img" />
<p>Awhile back I wrote an article about <a href="https://stanlemon.com/2018/09/15/visualizing-a-mortgage/">visualizing my mortgage</a> after my buddy Jon and I <a href="https://twistoflemonpod.com/episode-8-if-you-dont-buy-milkshakes-with-your-money-save-for-a-house/">discussed buying a house</a> on our <a href="http://twistoflemonpod.com/">podcast</a>. Since then my wife and I have aggressively gone after our mortgage and I was happy to report (on Facebook) that at the end of June we made the final payment. I hesitated posting about this on Facebook (I don’t post often), but I was pretty proud and happy and wanted to share that joy. Yes, it was a brag and it was anything but humble, but sometimes you earn a little bit of that. :)</p>
<p>Since my post many friends and <em>frenemies</em> alike have asked us two questions. First, how did we do it? Second, did we use Dave Ramsey’s methods? The answer to the second question is no, we did not explicitly use Dave Ramsey’s methods. Some of his principles and methods look very similar to our own though, so it’s possible we’ve been unintentionally using parts of them for the better part of a decade. The first question is harder to answer and does not have a quick and straight forward answer, so I figured I’d write a post about it.</p>
<p>Sara and I bought our first house a year into our marriage, back in 2007 right before the housing bubble burst. We bought a brand new town home in Pittsburgh and never expected it to be our forever home, though we loved it no less. The initial purchase was tough. We had saved some money up, but just barely enough to make it happen. Our downpayment was not dictated by our savings, but rather by our monthly payment. We had a budget and knew where we wanted that payment to be and thus cobbled together the money necessary to get that monthly payment.  We managed to get about 11% down on that first house. This was back when PMI was just a flat fee, so it was not a big factor in our decision making. That was the last time we put less than 20% down on a home. If I were buying my first house today PMI would probably play a bigger factor in determining the amount I was borrowing.</p>
<p>We lived in that townhome for three years and refinanced in the middle of it. This probably seems insane, but the interest rates were dropping so fast then that it seemed crazy not to. Our refinance saved us a ton of money on interest, and despite not being there for very long the numbers made sense. When we refinanced we also did something a bit unusual, we put more money down, thus reducing the total size of the new loan. I had been doing contract work and, with a very good year, had some extra savings. We were spreading out a smaller loan over a fresh set of 30 years with a smaller interest rate, so our payment was definitely going to be smaller. Many people would spend the money freed up from a refinance like this, but we had already budgeted for what we were paying and decided to keep doing so. This meant that the buffer from the refinance was suddenly going at our principal. When you pay extra on your principal it quickly begins to chip away at that balance.</p>
<p>At the end of our time at the townhome we bought what we thought would be our forever home, just North of Pittsburgh in a lovely town called Saxonburg. It turned out that we had some equity stored up in the townhome and sold it for more than we had bought it. All of that equity went into our next loan. Interest rates were still falling at this point and so once again a year after we bought that house we refinanced. Again, it would have been crazy not to. The monthly savings more than paid for itself a mere nine months later. I never thought this would make sense to do twice in my lifetime, but here we were. As I write this now I doubt I’ll see interest rates drop like that again. My first mortgage’s interest rate was twice what my last’s was!</p>
<p>Once again we had a buffer in our budget and used it to pay more principal. While we were living in Saxonburg life threw us a curve ball we didn’t expect and we ended up leaving Pittsburgh. We moved to a farm town my wife grew up in called Seymour in the state of Indiana. We had a hard time finding a home in Seymour and ended up staying with my in-laws for almost four months. During that time we kept the same budget, storing up four months of mortgage payments for the next house.</p>
<p>When we found a home we took all of the proceeds from the previous home, four additional months of mortgage payments, as well as some extra savings we had amassed and threw it all at our new house. On top of that the home in Seymour cost a lot less than the last home in Pittsburgh. We wound up with a mortgage payment far smaller than any we had in Pittsburgh, and so we did what we had always done and paid more on the principal.</p>
<p>At this point in my career I received my first ever bonus. This was not income I had budgeted for and so initially we debated what we would do with that money. Ultimately we threw it at our principal, creating a new habit that would follow us over the next five years we lived in Seymour. Any time I had a bonus, or Sara made money from playing the organ at church or teaching music, we threw that money at our mortgage. Over time we chipped away at that mortgage, the principal getting ever smaller.</p>
<p>When we sold our home in Seymour to move to Indianapolis we had been home owners for 11 years. We had paid a lot towards our principal over that time and were well situation for what we would do next. We decided with the new mortgage for our house in Indianapolis we were going to take out a 15 year loan, instead of the 30 year loan we had up until this point. This brings me to another point we’ve used to our favor over the years.</p>
<p>For 11 years we took out 30 year loans. This goes against most debt reduction strategies you’ll find out there. This probably seems odd considering where things ended up, but keep in mind we never expected to stay at the townhome or the house in Seymour forever. We knew we were never going to see the end of that loan, and so we opted for a smaller payment over a longer period of time. But why? If you ever spend time looking at a mortgage amortization schedule you’ll see that you pay very little on the principal at the front of the mortgage. By doing a smaller payment, we used that buffer toward our principal and in turn paid principal amounts that would have normally been done 10-15 years later in the amortization schedule. This allowed us to chip away at the principal faster. It probably sounds crazy and as I mentioned, it’s not a traditional debt reduction strategy, but knowing that we weren’t going to stay in that home forever enabled us to look at things a bit differently.</p>
<p>I'd be remiss if I didn't mention an important detail. When Sara and I got married we had no debt whatsoever. We started with a completely blank slate in large part due to both of our parents, who graciously made sure we entered adulthood with both a college degree and no student loans. There's probably a whole other blog article waiting to be written about student loan debt, but that's for another time. We were very blessed by the generosity of our parents; they gave us a huge leg up as we worked towards buying a home. <em>Thanks mom, dad, mom-in-law and dad-in-law!</em></p>
<p>Over our years of home ownership we kept focussed, throwing extra at the principal at every turn. First by budgeting for it and second through bonuses and income from odd jobs. The critical point here is to borrow lower than the budget and commit the excess to the principal. There was no magic, no secret formula and no books behind our strategy. Four houses and six mortgages later we’re finally done.</p>
</description>
        <pubDate>Fri Aug 09 2019 01:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2019/08/08/how-we-paid-off-our-mortgage/</link>
        <guid isPermaLink="true">https://stanlemon.com/2019/08/08/how-we-paid-off-our-mortgage/</guid>
        
      </item>
    
      <item>
        <title>How to Start Budgeting</title>
        <description><p>It can be difficult to know where to start budgeting. There are entire companies built around the art of budgeting, everything from Intuit’s once ubiquitous Quicken software to classic envelope budgeting, where you use actual physical envelopes loaded with cash. In some respects a whole industry of financial self help experts like Dave Ramsey have popped up with the sales pitch of helping you budget. The truth is budgeting doesn’t have to be hard and there’s a really easy way to start.</p>
<p>I am not going to sell you an ideology, method or software. I am a big believer in budgeting, or maybe more accurately knowing what you have and then only spending what you have. To get there you don’t have to attend a conference, buy a book or sign up for a software subscription. It’s actually pretty straight forward.</p>
<p>First let’s take a step back and think about what the goal of budgeting is: it’s to give yourself permission to spend money. That may sound weird at first, but without a budget you’re running wild and free never quite knowing whether or not you should or should not spend money on something. Budgeting is a tool that basically says, “Yeah Stan, it’s OK to buy this right now.” Or, “Sorry Stan, not right now, you need to save up for this one.”</p>
<p>How do you start a budget? I’m going to show you the most the bare bones budget and everything you need to get started. You don’t necessarily need a computer for this, a pen and piece of paper will work; but if you have Excel, Google Spreadsheets or AirTable I recommend using that.</p>
<p>To get started building a budget there are really just two steps:</p>
<ol>
<li>Identify your income.</li>
<li>Identify your recurring expenses.</li>
</ol>
<p>This may seem overly simplistic, but as with so many things one of the biggest risks in starting down the path of budgeting is to attempt to boil the ocean. One of the ways you can boil the ocean is with super fine grained categories that you try to shove all of your expenses into. That won’t serve you well in the short run and over time it’ll just get frustrating.  Remember, the goal is to give yourself permission to spend money, not to frustrate yourself. The best way to give yourself permission is through simple knowledge, not overbearing process.</p>
<p>If you’re gainfully employed identifying your income should be pretty straight forward. If you’re paid twice a month just take your after taxes pay check and multiply it by 2.  If you’re paid every two weeks I recommend building your budget around just 2 paychecks, as that’s all you’ll have most months.  That extra pay check you get a few times a year is a great way to tackle debt or to build up savings. If you’re a contractor or have some sort of variable income the best thing to do is spend some time figuring out what a reliable month looks like and basing your month off that.</p>
<p>For the sake of illustrating my point let’s say my after taxes pay check is $2,000. This means that for any given month my total budget is $4,000, and thus I’m going to write this at the very top of my budget.
￼
<img alt="A drawing of income for a budget" class="post-img" src="https://stanlemon.com/assets/how-to-start-budgeting-income.png" srcset="https://stanlemon.com/assets/how-to-start-budgeting-income.png, https://stanlemon.com/assets/how-to-start-budgeting-income@2x.png 2x" /></p>
<p>Next I need to think about all the things that I spend money on every month, like my cell phone bill, my mortgage and my car insurance.  Your list might look something like this:</p>
<img alt="A drawing of expenses for a budget" class="post-img" src="https://stanlemon.com/assets/how-to-start-budgeting-expenses.png" srcset="https://stanlemon.com/assets/how-to-start-budgeting-expenses.png, https://stanlemon.com/assets/how-to-start-budgeting-expenses@2x.png 2x" />
￼
These expenses never change, or at least not until something radical happens like I get rid of my car or cancel Netflix. There’s another category of recurring transactions that can be harder to pin down and those are your utilities, such as gas, water, electric and sewer. If your utility company offers a budget plan you should use it. The budget plan is designed to standardize your monthly payment and cover the spikes that can occur seasonally when, say, it’s cold outside and you need more gas for your furnace. If your utility company does not offer a budget plan then my best recommendation is to use one of three things: (1) Your highest bill, (2) Your average bill, or my personal favorite (3) Your average bill plus its standard deviation.
￼
<img alt="A spreadsheet table of numbers showing standard deviation" class="post-img" src="https://stanlemon.com/assets/how-to-start-budgeting-std-dev.png" srcset="https://stanlemon.com/assets/how-to-start-budgeting-std-dev.png, https://stanlemon.com/assets/how-to-start-budgeting-std-dev@2x.png 2x" />
<p>You’re probably thinking, standard deviation, are you kidding me?!? Nope. Here’s the thing, if you use the highest bill then most months you’re over budgeting. If you use the average then most months you’re under budgeting. You need to give yourself some sort of buffer, and the standard deviation can help do that in a rationale way. If you don’t want to mess with the math though, simply average your bill out over 12 months and call it a day.</p>
<blockquote>
<p><small>If like Mrs. Lemon you were left wondering what standard deviation is, never fear! Standard deviation is a measurement of how far apart your numbers are. For the purpose of budgeting it can help you come up with a buffer to use when determining your number. Any spreadsheet software can figure this number out for you, but if you want to learn more <a href="https://www.mathsisfun.com/data/standard-deviation.html">check out this link</a>.</small></p>
</blockquote>
<p>Once you’ve dealt with your utilities you’re down to the truly variable stuff, such as groceries, eating out and auto fuel. Most people have no clue how much they spend in these categories each month. If you start budgeting you will eventually, but for now don’t sweat it because again, you’re just getting started.</p>
<p>Let’s take a look at the whole budget together now:</p>
<img alt="A drawing of a full budget" class="post-img" src="https://stanlemon.com/assets/how-to-start-budgeting-full-budget.png" srcset="https://stanlemon.com/assets/how-to-start-budgeting-full-budget.png, https://stanlemon.com/assets/how-to-start-budgeting-full-budget@2x.png 2x" />
￼
Based upon our back of the napkin math here, we appear to have $2,873.01 leftover after our recurring expenses. Now the trick is to make sure you don’t spend more than that!
<p>The easiest way to track your spending is with fewer accounts. Many items, like the mortgage (or rent) and utilities often require you to write a check, use bill pay from your checking account or do an electronic funds transfer. If you are a debit account user than using one account is easier than if you’re using a credit card, because all of your payments can come from the same place. If you’re a credit card user you can try to put those fixed costs onto your checking account and then make sure your credit card balance never exceeds the amount you’ve budgeted for as ‘leftovers’ (the part circled in yellow above).</p>
<p>Here’s the next thing to keep an eye on: how much money are you spending each day beyond your fixed costs? If your leftovers are $2,873.01 you have roughly $92 per day that you can spend. Some days you won’t spend any, others you’ll spend more. The point is not to get ahead of yourself.  If at the end of a week you’ve spent more than $644 ($92 x 7) you need to slow down and make adjustments.</p>
<p>Save your receipts as you’re getting started. They can be handy to look back at the end of the month and see what you spent money on.  This is especially handy if you eat out a lot, or find yourself making surprise visits to Target frequently. Those receipts can help you determine that maybe you don’t need appetizers every time you go out, or perhaps you really didn’t need those new towels from Target.</p>
<p>As time goes on if you track the expenses in your leftovers you’ll start to see a few more categories emerge, such as Groceries, Eating Out, Household Items and Entertainment. Remember what I said earlier about fine grain categories. Whatever you do, resist the temptation! Come up with good round numbers for these things like, $500/month for Groceries and record your transactions and see where things shake out. The most critical piece is not to spend more than the $2,873.01 you have leftover.</p>
<p>Don't make budgeting a burden; remember what we said earlier, the goal here is to give yourself permission to spend money - specifically that money you have. When budgeting works out well you can react to surprises, like a new alternator for your car, or you can celebrate for things like a birthday. Budgeting also steers you clear of debt, especially credit card debt, which can cripple your financial abilities in ways too numerous to count. At the end of the day, budgeting should empower you, and if it's not then take a step back and start over.</p>
</description>
        <pubDate>Thu Aug 01 2019 11:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2019/08/01/how-to-start-budgeting/</link>
        <guid isPermaLink="true">https://stanlemon.com/2019/08/01/how-to-start-budgeting/</guid>
        
      </item>
    
      <item>
        <title>Life with a Twist of Lemon - The First Year</title>
        <description><p>For close to a year now my friend <a href="http://jonkohlmeier.net">Jon</a> and I have been recording our podcast, <a href="https://twistoflemonpod.com">Life with a Twist of Lemon</a>. Jon and I have been friends for a long time, and he had been advocating for us to do a podcast for a while when I finally caved, contingent on one condition: <strong>I would do nothing.</strong> I knew if Jon was serious this wouldn’t be a problem, and we could simply replace one of our usual phone calls with a high-quality microphone and it wouldn’t be more time out of my day. To sweeten the deal, Jon suggested we use my name in the title. <em>As if I could resist!</em></p>
<p>We really had no idea what the podcast would be about. There was no plan. We were just going to talk. It’d be like when the NSA ease drops in our phone conversations. Lo and behold themes would emerge.</p>
<p>This week Jon and I released an <a href="https://twistoflemonpod.com/one-year-with-a-twist-of-lemon/">episode reflecting back on the year’s highlights</a>. I thought in the spirit of our anniversary celebration I would list out my top 5 episodes, the ones you really shouldn’t miss.</p>
<img src="https://stanlemon.com/assets/life-with-a-twist-of-lemon.jpg" srcset="/assets/life-with-a-twist-of-lemon.jpg, /assets/life-with-a-twist-of-lemon@2x.jpg 2x" alt="Life with a Twist of Lemon" class="post-img" />
<hr>
<p><strong>Honorable Mention:</strong> In December we began running a crawl before the show where I made a pitch to raise donations for our friend, <a href="https://www.lcms.org/Fritsche">Pastor Joel Fritsche, who serves as a missionary in the Dominican Republic</a>. The pitch was simple: Donate $50 and I’ll match it and send you a sticker. We raised money and sent out stickers; it was pretty awesome.</p>
<hr>
<h3><a href="https://twistoflemonpod.com/episode-25-the-budget-episode/">#5 January 3, 2019 - The Budget Episode</a></h3>
<p>In this episode we talked about budgeting, the things we do and how we structure our finances each month. This is just good listening in my opinion and is arguably one of our more timeless episodes.</p>
<h3><a href="https://twistoflemonpod.com/episode-8-if-you-dont-buy-milkshakes-with-your-money-save-for-a-house/">#4 September 6, 2018 - If you don’t buy milkshakes with your money, save for a house!</a></h3>
<p>Our most listened to episodes started with a twist:  There were no milkshakes!  Jon was in pursuit of a house and peppered me with questions about what to expect.  After recording I ended up resurrecting my blogging career and posted about how my wife and I visualized our mortgage (https://stanlemon.com/2018/09/15/visualizing-a-mortgage/).</p>
<h3><a href="https://twistoflemonpod.com/a-philisophical-debate-regarding-grilled-cheese/">#3 March 14, 2019 - A Philosophical Debate regarding Grilled Cheese</a></h3>
<p>Much to my surprise this turned out to be the most controversial episode we’ve recorded. Shortly after this one was released my cell phone blew up with messages appalled by my grilled cheese criteria. I’m still defending my position on this one, and I’m still right.</p>
<h3><a href="https://twistoflemonpod.com/patrick-sturdivant-the-first-listener-and-our-review-of-endgame/">#2 May 2, 2019 - Patrick Sturdivant: The First Listener (and our review of Endgame)</a></h3>
<p>This episode was literally months in the making! We recorded it with our friend Patrick after watching Endgame twice. It made for a long night, but pretty good podcast listening. (This is also where we lost Jon’s mom as a listener.)</p>
<h3><a href="https://twistoflemonpod.com/episode-14-milkshakes-power-our-productivity/">#1 October 18, 2018 - Milkshakes power our productivity</a></h3>
<p>This is good clean Milkshake fun, with our very first guest – my very own daughter, Lucy Lemon. It’s in this episode where Lucy established the rubrics for milkshake straws, which has become part of our Milkshake method evaluation system ever since.</p>
</description>
        <pubDate>Fri Jul 26 2019 12:01:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2019/07/26/life-with-a-twist-of-lemon-the-first-year/</link>
        <guid isPermaLink="true">https://stanlemon.com/2019/07/26/life-with-a-twist-of-lemon-the-first-year/</guid>
        
      </item>
    
      <item>
        <title>My Favorite Marvel Movies</title>
        <description><p>I’m a big fan of the Marvel Cinematic Universe. I don’t hesitate to get a baby sitter and see new releases in the theater and I’ve pretty much preordered every release (sans Guardians 2). I love the genre, but even more so I think the MCU represents some of the best movie writing of my lifetime. Consistently the MCU rolls out great content, so that even the worst MCU movie is still a great movie. Not even Star Wars can rival the consistent greatness of the MCU’s story telling.</p>
<p>Because I’m such an MCU nerd I often get asked to rank the movies from my favorite to least. That’s no easy task! I’ve tried this before with Star Trek and Star Wars where the disparity between a great movie and the bottom of the barrel is stark. In the MCU that disparity is narrow and sometimes hard to navigate.  The middle of the list of also especially difficult to decide because they’re on such even ground with each other. Nonetheless for you, dear reader, I shall endeavor to order these movies. Please note, this list is fluid and I have no reservations about updating this list over time.</p>
<p>Lastly… don’t ever watch these movies in this order! The MCU should <strong>always</strong> be watched chronologically, period. Unlike Star Wars the release order matters, with but a few exceptions that, quite honestly, are not worth taking out of release order (looking at you Captain America: First Avenger and Captain Marvel).</p>
<ol>
<li>Avengers: Infinity Wars</li>
<li>Avengers: Endgame</li>
<li>Captain America: Civil War</li>
<li>Iron Man 1</li>
<li>Thor: Ragnarok</li>
<li>Spider-Man: Far From Home</li>
<li>Guardians of the Galaxy</li>
<li>Captain America: Winter Soldier</li>
<li>Avengers</li>
<li>Black Panther</li>
<li>Captain America: The First Avenger</li>
<li><em>Captain Marvel</em></li>
<li><em>Ant-man</em></li>
<li><em>Dr. Strange</em></li>
<li><em>Spider-Man: Homecoming</em></li>
<li><em>Iron Man 2</em></li>
<li><em>Thor</em></li>
<li>Age of Ultron</li>
<li>Iron Man 3</li>
<li>Thor: Dark World</li>
<li>Guardians of the Galaxy 2</li>
<li>Ant-man &amp; the Wasp</li>
</ol>
<hr>
<p><em>A few words (possible spoilers below)...</em></p>
<ul>
<li>Notice the italics? These are movies that I struggled to sort amongst themselves and I would not object to someone’s personal reorganization of 12-18.</li>
<li>Yes, Infinity wars tops Endgame. Why? Infinity Wars is arguably the best most complete story in the MCU. They weren’t afraid to leave you entirely hopeless and that made this an emotionally gripping movie. Endgame is great, especially the final scenes, but as a whole the film isn’t greater than the fantastic writing of Infinity Wars.</li>
<li>Why is Age of Ultron so low? Yes, we get Vision, Scarlett Witch and the fist mention of Wakanda, but while there’s some great stuff going on here it is all in all a weak movie with lots of holes. Bottom line is it could have been better. It’s critical to the development of the MCU’s story line but I never find myself going back and rewatching it because I want to.</li>
<li>Dark World: Elves, enough said.</li>
<li>Guardians 2 has one of the best opening 30 minutes in the MCU. It’s hilarious and just great entertainment. After that 30 minutes we slip into the “I’ve got daddy issues” phase of the movie and the writing just goes down the drain. I can also make an argument that this is the least valuable movie to the franchise. What does it add to the ultimate culmination of Infinity Wars? Nothing.</li>
<li>I wanted so badly to love Ant-man &amp; the Wasp, especially since Ant-man has long been a favorite of mine. I was ecstatic that we got the Wasp and that she was so key to this film, but the problem here is the villain. Which one, you ask? Exactly! This movie struggled to identify a clear bad guy and suffered because of it. Yes, it was hilarious and yes the post credits scene is absolutely critical to Endgame, making it one of the most necessary movies to watch going into it, but all in all it was just bad writing. My biggest fear from this one is that they don’t make a third, because that would be a travesty.</li>
<li>There are a ton of Captain Marvel haters out there, but I am not one. The biggest criticism I’ve heard is about Brie Larson’s almost stoic performance. Those with this criticism simply don’t understand the character and clearly don’t understand the Kree. So if Brie Larson’s sometimes emotionless acting bugged you, go do yourself a favor and read up on the Kree. If there’s anything to fault this movie for it’s probably the lack of depth around Kree culture, but then again hey we didn’t need (or want) an Endgame-length movie here.</li>
<li>Why is Far From Home so high? Well, I just watched it! But more so than that it ended up being more of a comic book styled movie than other MCU flicks. It has great character development for Spider-Man too. I loved that it was intrinsically tied into Endgame without being fully dependent upon it. There are so many great nerd-nods in this movie that MCU lovers will gush over it. Lastly, it <strong>finally</strong> capitalized on BARF, this odd left field reference in the beginning of Civil War that had until now never been capitalized on. MCU fans have been patiently waiting for something to be made of BARF and now we’ve got it in Mysterio!</li>
<li>Many of my friends will recall that for a long time I strongly disliked the first Avengers movie. So it might seem odd that it now stands in the top 10. What changed? I have long loved the story telling and character development of the MCU far more than I did the special effects and elaborate battle scenes. This is why Captain America: The First Avenger sits so high on my list, when for many it is near the bottom. The first Avengers is an action movie that has an amazing amount of ground to cover and thus it spends a lot less time on character development than say Ultron. What changed my mind was actually Endgame. As I re-watched the entire MCU in preparation for Endgame I found myself coming back to that first Avengers movie and really appreciating how much is setup for the rest of the MCU in that movie. It's this appreciation that drove it up so high on my list.</li>
<li>What about The Incredible Hulk? Well, what about it?</li>
</ul>
</description>
        <pubDate>Sat Jul 06 2019 15:01:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2019/07/06/my-favorite-marvel-movies/</link>
        <guid isPermaLink="true">https://stanlemon.com/2019/07/06/my-favorite-marvel-movies/</guid>
        
      </item>
    
      <item>
        <title>React PouchDB Components</title>
        <description><p>Last night I released a new library to <a href="https://github.com/stanlemon/react-pouchdb">GitHub</a> and <a href="https://www.npmjs.com/package/@stanlemon/react-pouchdb">npm</a> called React PouchDB components. I'm excited to share this library, which started as an experiment to illustrate to my friend <a href="http://jonkohlmeier.net">Jon</a> how easy it could be to leverage <a href="http://pouchdb.com">PouchDB</a> in <a href="https://reactjs.org">React</a>. After enough tooling around I suspected that the pieces could be extracted and shared more broadly.</p>
<p>There are a number of different ways to deal with state in React, everything from the simple <a href="https://reactjs.org/docs/state-and-lifecycle.html"><code>setState()</code></a> to <a href="http://redux.js.org">redux</a>. Most sites need remote data, and so as a developer your options become a little more complex, leveraging promises inside of <code>componentDidMount()</code> or tools like <a href="https://www.github.com/reduxjs/redux-thunk">redux-thunk</a>. These are all great, but what I wanted was a simple way to fetch data into PouchDB and for it to be declarative.</p>
<p>Here's what I imagined...</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> Database<span class="token punctuation">,</span> Document <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@stanlemon/react-pouchdb"</span><span class="token punctuation">;</span><br><br><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token punctuation">(</span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Database</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-document<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"><br>      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Document</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Database</span></span><span class="token punctuation">></span></span><br>  <span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><br><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name<span class="token punctuation">,</span> description <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token punctuation">(</span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"><br>      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text"><br>      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>description<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text"><br>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br>  <span class="token punctuation">)</span><br><span class="token punctuation">}</span></code></pre>
<p>There are two components here, the first <code>&lt;MyComponent /&gt;</code> is a simple view, it renders some properties that are passed to it.  The other is <code>&lt;App /&gt;</code> which declaratively establishes a PouchDB database connection using the <code>&lt;Database /&gt;</code> component.  <em>This component can take an optional name and remote URL for syncing.</em> The <code>&lt;App /&gt;</code> component also uses the <code>&lt;Document /&gt;</code> component which is responsible for fetching data out of a PouchDB document and setting it as properties on <code>&lt;MyComponent /&gt;</code>.</p>
<p>One of the other advantages of the <code>&lt;Document /&gt;</code> component is that it provides a property to it's children called <code>putDocument()</code> that allows you to update the state of your document, just as you might when using <code>setState()</code>. This method eagerly updates the component's properties, and then ensures that the document is updated in PouchDB.</p>
<p>As an added bonus, if you're syncing your PouchDB database to a remote <a href="https://docs.couchdb.org">CouchDB</a> instance, the <code>&lt;Document /&gt;</code> component will update properties when change events occur. This means that you can sync down remote updates with little effort in near real time.</p>
<p><strong>There is a working example in the GitHub repository under the <code>./example/</code> directory. It has it's own <code>README</code> and is really easy to spin up and start playing.</strong> <a href="https://stanlemon-react-pouchdb.glitch.me">You can check out the example app over on glitch.</a> This example app showcases several different ways to leverage a document including <code>&lt;Document /&gt;</code> and a higher order function <code>withDocument()</code>.</p>
<p>Ready to give it a spin?</p>
<pre class="language-shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> --save @stanlemon/react-pouchdb pouchdb</code></pre>
<p>From there the <a href="https://github.com/stanlemon/react-pouchdb/blob/master/README.md"><code>README</code></a> is your friend!</p>
<p>This library is intended to quickly get a PouchDB database into your react application. It won't work for every situation and there are definitely more complicated use cases that it does not cover, but as a starting point it should get you off the ground quickly.  It's also worth noting that this library is not intended to work with other state container libraries.  Maybe it does, but that'll be purely by chance.  If you are using something like redux you should consider taking a look at <a href="https://github.com/vicentedealencar/redux-pouchdb">redux-pouchdb</a>.</p>
<p>Please reach out with feedback!  I love questions and suggestions so send them my way.</p>
<p><em>Stay tuned, I have some more PouchDB related goodies coming.</em></p>
</description>
        <pubDate>Fri Mar 01 2019 02:47:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2019/02/28/react-pouchdb-components/</link>
        <guid isPermaLink="true">https://stanlemon.com/2019/02/28/react-pouchdb-components/</guid>
        
      </item>
    
      <item>
        <title>A Budget with Consequences</title>
        <description><p><em>Author's Note: I originally wrote this during the government shutdown earlier this year, but thankfully that's now over and I can maintain my streak of not writing about politics.</em></p>
<hr>
<p>Budgeting is an exercise in compromise. Compromise is the right way to view it because unless you are really wealthy you never quite have enough money to buy and consume everything you want. Or at least, if you’re like me you don’t. I’m sure somewhere out there is a perfectly content person who isn’t filthy rich and has everything they want - but that’s not me. I constantly find myself thinking things like: wouldn’t it be great to have a new iPad? Just because I want something though, does not mean I buy it. I have bills to pay, mouths to feed and other commitments that all force me to make a compromise, at least for this month.</p>
<p>Let’s take a look at an example of everyday compromise in budgeting: let’s buy a car with financing.  Before you sit down to sign the paper to buy a car you have to pick one out. Often you pick one out off of a lot. Your choices are limited by what’s available at that particular dealership. You may decide to buy the blue car that doesn’t have the sun roof over the red one that does because you like blue better. That’s a compromise. When you do sit down to finance it you have choices: a 3, 5 or even an 8 year car loan. Each requires a different amount of money paid for a downpayment and each will require a different amount of money monthly. As you continue the cycle of evaluating your options you are making more compromises, trading one thing for another in the hopes of reaching the ultimate goal: driving away with a new car. Maybe the compromises are big ones like, “This car is too expensive. I need to go get the gray car without the leather trim, instead,” thus blowing up the whole process and starting over. Or maybe the compromises are more subtle, like cancelling your satellite TV subscription in favor of over the air channels to free up more money in your monthly budget to pay for your car loan. Every decision, every step somehow involves a compromise.</p>
<p>Money and goods are in limited supply, and so you’re constantly making tradeoffs between what you have, what you need and what you want. I’ll buy that new chair for my office today rather than the Nintendo Switch I’ve been coveting because I have a limited amount of funds available. I value a comfortable chair I use every day over playing Mario Kart. In my ideal world I’d have it all. No compromise would be required, and it’d be even better if I didn’t have to work for it either. That’s just not the world we live in.</p>
<p>Everyone budgets, even if they don’t think they do.  Maybe you don’t have a spreadsheet or fancy app to categorize and track your spending, but you’re still going through the budget process in your life. The loan example earlier is crude budgeting because it’s calculating a decision to spend funds. That’s really what budgeting is, calculating what to spend based upon compromises.</p>
<p>When we attempt to budget without compromise, bad things tend to follow. We buy a car we can’t afford and we default, resulting in it being taken away from us. Or we don’t pay that credit card off fast enough and attempt to buy food and when we have no credit left we end up not able to feed our families.  Compromise is ultimately the curb that hones in responsible purchasing decisions. That curb is based off of consequences, which are critical. They are the thing that gives us pause when we don’t want to compromise.</p>
<p>Curbs are good, they keep cars on the road. Curbs provide the external boundaries for our path forward. This is the function of compromise, and our budget is really just that road we’re cruising down from month to month.</p>
<p><em>Want to hear more budgeting banter? <a href="https://twistoflemonpod.com/episode-25-the-budget-episode/">Check out Episode 25 of Life with a Twist of Lemon</a>.</em></p>
</description>
        <pubDate>Tue Feb 26 2019 00:05:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2019/02/25/a-budget-with-consequences/</link>
        <guid isPermaLink="true">https://stanlemon.com/2019/02/25/a-budget-with-consequences/</guid>
        
      </item>
    
      <item>
        <title>React, Relay & Mutations</title>
        <description><p>A working example of what I'm going to describe here can be found at https://github.com/stanlemon/example-relay-app.</p>
<hr>
<p>For awhile <a href="https://graphql.org">GraphQL</a> has looked interesting to me, like something I wanted to learn. I love the concept of strongly typing expressive queries that can be batched into a single request. That's GraphQL, a technology that really seems to shine in UI work for single page apps (SPAs).</p>
<p><a href="https://facebook.github.io/relay/">Relay</a> is Facebook's GraphQL framework for <a href="https://reactjs.org">React</a>, it's really where GraphQL got its traction from. I love React and spend a good portion of my <em>hobby time</em> building stuff with it, so GraphQL was a natural progression for me.  The problem is that documentation and examples on how to use Relay are all over the place and it's even harder to get into if don't already have a working GraphQL server. <em>Some might point out that <a href="https://www.apollographql.com/">Apollo</a> is a much easier place to start with React &amp; GraphQL and that definitely seems true, but I specifically wanted to familiarize myself with Relay.</em></p>
<p>My first challenge was a working GraphQL server that I could issue queries against. Fortunately <a href="https://www.graphile.org/postgraphile/">PostGraphile</a>] makes this super easy. You need a <a href="http://postgresql.org">Postgres</a> instance to get going, but after that you have a working GraphQL server over top of a Postgres database. I won't go into how to setup PostGraphile, it's documentation is actually rather than good and there are some additional environment notes in the repository with my example code.</p>
<p>Querying from within Relay is pretty easy and straightforward and the documentation that Facebook offers is adequate. <a href="https://www.graphqlbin.com/v2/KZ4Efq">If you want to play around with querying check out this GraphQL playground with Star Wars data, it's pretty fantastic!</a> GraphQL is not just for fetching data though, it also allows you to create, update and delete it. Those operations are called mutations and their documentation is a lot less clear.</p>
<p>A mutation in and of itself is not complicated, there are really two parts to it: (1) the mutation definition and then (2) committing the mutation to the GraphQL server.  That looks like this:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> graphql<span class="token punctuation">,</span> commitMutation <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-relay'</span><br><br><span class="token keyword">const</span> mutation <span class="token operator">=</span> graphql<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>  mutation AppCreatePersonMutation($input: CreatePersonInput!) {<br>    createPerson(input: $input) {<br>      person {<br>        id<br>        firstName<br>        lastName<br>      }<br>    }<br>  }<br></span><span class="token template-punctuation string">`</span></span><br><br><span class="token function">commitMutation</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> <span class="token punctuation">{</span><br>  mutation<span class="token punctuation">,</span><br>  variables<span class="token operator">:</span> <span class="token punctuation">{</span><br>    input<span class="token operator">:</span> <span class="token punctuation">{</span><br>      person<span class="token operator">:</span> <span class="token punctuation">{</span><br>        firstName<span class="token operator">:</span> <span class="token string">"Stan"</span><span class="token punctuation">,</span><br>        lastName<span class="token operator">:</span> <span class="token string">"Lemon"</span><br>      <span class="token punctuation">}</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>In the app I built I had already loaded all of the person records from my database using a query like this:</p>
<pre class="language-javascript"><code class="language-javascript">query AppQuery <span class="token punctuation">{</span><br>  allPeople <span class="token punctuation">{</span><br>    nodes <span class="token punctuation">{</span><br>      id<br>      firstName<br>      lastName<br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<p>When I first got this working I naively expected the properties in the react component that came from this query to update, such that my new person would appear in my list.  But alas it did not! Updating the state store for relay is not straight forward. The <a href="https://facebook.github.io/relay/docs/en/mutations.html">mutation documentation on relay's site</a> has some clues, but I ended up struggling to implement what I thought was a pretty straight forward user case: <em>updating the list of nodes from my initial query with a new record</em>.</p>
<p>Make sure your <code>createPerson()</code> mutation is returning the same fields as your <code>allPeople</code> query, and also make sure that <code>allPeople</code> is returning <code>id</code>. Matching fields in the response is important for new records. If you're only doing updates you can get away with returning just the fields you've changed, but the example below does not cover partial updates.  The <code>id</code> field is not actually required for create mutations like this, but as soon as you start working with updates you'll thank me as the the global graphql id is the easiest way to yank an existing record out of the store.</p>
<p>What we need to do now is define an <code>updater</code> function on that the second parameter to <code>commitMutation()</code>.  This updater receives a single parameter, the <code>store</code> and this is where we will do our handy work.</p>
<p>Inside the updater function the first thing we want to do is get the portion of the store where <code>allPeople</code> is at, because this is what we need to modify.  We need to put our new person into the list of person records in that part of the store, which will in turn trigger the update to our UI. This is actually pretty easy to do as long as you know the key to pass the <code>get()</code> method. I found this out using the <code>replay-devtools</code>, which I highly recommend installing.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> allPeople <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'client:root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Now we have the container of the query. Because we're using PostGraphile everything is nested under <code>nodes</code> so we actually need to yank that out from under our <code>allPeople</code> variable. That looks like this:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> nodes <span class="token operator">=</span> allPeople<span class="token punctuation">.</span><span class="token function">getLinkedRecord</span><span class="token punctuation">(</span><span class="token string">'allPeople'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLinkedRecords</span><span class="token punctuation">(</span><span class="token string">'nodes'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>We also need to get the person record that our GraphQL server returned to us and then yank the payload from it.  The payload in this case is that new person we created.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> payload <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getRootField</span><span class="token punctuation">(</span><span class="token string">'createPerson'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token keyword">const</span> newPerson <span class="token operator">=</span> payload<span class="token punctuation">.</span><span class="token function">getLinkedRecord</span><span class="token punctuation">(</span><span class="token string">'person'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>We have the original list of persons and the new person we added, now we need to combine them, this is really easy using the spread operation:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> newNodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>nodes<span class="token punctuation">,</span> newPerson<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<p>Now we have the full list of person objects as they exist in our database. Keep in mind if you were sorting these somehow with graphql you will need to insert the newPerson into the proper place, not just blindly at the end like we are doing.   Lastly we take that new nodes list and replace it in our <code>allPeople</code> portion of the store like so:</p>
<pre class="language-javascript"><code class="language-javascript">allPeople<span class="token punctuation">.</span><span class="token function">getLinkedRecord</span><span class="token punctuation">(</span><span class="token string">'allPeople'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLinkedRecords</span><span class="token punctuation">(</span>newNodes<span class="token punctuation">,</span> <span class="token string">'nodes'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Once this is done the local store in your react component will re-render with the new data.</p>
<p>Keep in mind, this is a root level scenario for the component in question.  It seems pretty simple, but good luck finding an example that works like this one. If you're using data nested under another object (like comments on a post) than there are plenty of examples on the web more suited to that scenario, examples that involve things like the <code>ConnectionHandler</code>.</p>
<p>You can find all the code for my working example over at https://github.com/stanlemon/example-relay-app</p>
</description>
        <pubDate>Wed Jan 23 2019 12:30:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2019/01/23/react-relay-and-mutations/</link>
        <guid isPermaLink="true">https://stanlemon.com/2019/01/23/react-relay-and-mutations/</guid>
        
      </item>
    
      <item>
        <title>Gillette Won</title>
        <description><p>I do my best to avoid social media, and even when I do participate I consume a pretty narrow set of content. For example, my twitter is highly curated to focus on Indianapolis municipal happenings, Apple product rumors and javascript news. On the rare occasion I login to Facebook it’s mostly to respond to messages on my podcast page or to look at old pictures of Chicago North Western trains. I rely on my lovely wife and podcast cohort Jon to keep me in the know on the latest and greatest internet fads, at least the ones that stir up enough trouble to warrant a text. It really is a top notch curation system.</p>
<p>This week the Gillette “The Best Men Can Be” commercial somehow bubbled its way up into my view and I read reactions from both the political left and the political right on how wonderful and how terrible this commercial is. If you’re not familiar with the video you can find it on YouTube. Like so many things today it yielded truly polar reactions. Those that loved it applauded it for calling out what some refer to as “bro culture”. Those that hated it claimed it vilified all men universally.</p>
<p>Here’s what annoys me about this whole thing: Gillette won and everyone else lost. Anyone who thinks Gillette was somehow in pursuit of altruism forgets the age old axion that “any press is good press”. Gillette is owned by Proctor &amp; Gamble, a behemoth of consumer goods based out of Cincinnati.  It is a publicly owned and traded company whose sole purpose is to generate profits for its shareholders. Let that set in a minute. Gillette exists to make money, plain and simple.</p>
<p><a href="https://www.ft.com/content/9bb5cc54-d368-11e6-b06b-680c49b4b4c0">In 2015 Gillette was the #1 shaving company in the United States, holding onto 64% of the market with runner up Schick.</a> By all accounts both Gillette and Schick make crappy shave products.  Both companies sell dull cartridge blade systems that generate an absurd amount of waste, but I digress. In recent years, Dollar Shave Club encroached onto Gillette’s market share by more than a razor’s edge, resulting in a 1 Billion dollar purchase by Unilever. Even beyond sub par subscription services like Dollar Shave Club, you have stores like <em>The Art of Shaving</em> popping up everywhere and a general interest in the more classical safety razor genre of equipment. All this is to say, Gillette is hurting. Its relevance is shriveling up and it needs some life kicked back into its blood. Don’t believe me though, take a look at Procter &amp; Gamble’s stock prices.  In a hugely volatile year on the stock market <a href="https://finance.yahoo.com/quote/PG/">$PG</a> is basically untouched. That’s not what share holders want to see, they want growth!</p>
<p>Gillette has to be loving all the PR it’s getting. Again, any press is good press. People who weren’t talking about Gillette are now, and a product that was not memorable is now gliding its way onto everyone’s social media feeds.  So if you loved the video, maybe you’ll go out and buy some Gillette razors in support of the company and its bold position in this video. That’ll help Procter &amp; Gamble’s quarterly sales, and that’s exactly what they want. Or maybe you hated the video, feeling like it unilaterally vilified half the population with stereotypes. If Gillette is lucky, you took to social media to complain about it, or shared some article or other post and further perpetuated their ad campaign. The best advertising is free, and you played right into Gillette’s hand.  Either way, Gillette is on everyone’s mind, and that imprint will linger for a bit.</p>
<p>It really doesn’t matter where you stand on the issue, because in the end Gillette won. Nothing has changed, we’re just as angry and polarized as we were before the campaign, if not more so.</p>
<p>Gillette is in good company though. We hate to admit it, but this sort of appeal to our heart strings style advertising - which has absolutely nothing to do with the product being sold - is increasingly common. Tune in on a Sunday and the NFL is talking up fighting cancer and other diseases as well as supporting the military. Don’t be confused that these are somehow honest appeals. At the end of the day it’s just another ploy to get you to tune in and watch the real product, a football game. If you support our military and it appears like the NFL does, you tune in to support them, thus increasing their viewership and further increasing the cost of advertisement on one of the sacred NFL commercial slots. That’s the end goal of these heart string campaigns.</p>
<p>Don’t get me wrong, there are honest folks who mean well by participating in these campaigns their companies put on. I really don’t mean to discount the intent of both NFL players and Gillette employees, I just think we need to be honest about what drives campaigns like this. As much as I would love for it to be, it’s not altruism. We shouldn’t somehow project that onto the marketing departments of these big economic machines who ultimately have dividends to pay every quarter.</p>
<hr>
<p>On an unrelated note, if you are either thinking of buying Gillette products because you loved the video or if you are thinking of no longer buying Gillette products because you hated the video let me take this opportunity to appeal to you. There’s a better way! Get yourself a good ol’ <a href="https://amzn.to/2W6O16e">Merkur safety razor</a> and some <a href="https://amzn.to/2DlzhbY">Astra blades</a> and enjoy a better shave. Chances are you’ll support a smaller business in the process too, winning all around.</p>
</description>
        <pubDate>Sat Jan 19 2019 18:30:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2019/01/19/gillette-won/</link>
        <guid isPermaLink="true">https://stanlemon.com/2019/01/19/gillette-won/</guid>
        
      </item>
    
      <item>
        <title>Visualizing a Mortgage</title>
        <description><img src="https://stanlemon.com/assets/visualizing-a-mortgage.jpg" srcset="/assets/visualizing-a-mortgage.jpg, /assets/visualizing-a-mortgage@2x.jpg 2x" alt="A drawing of the Lemon home representing our mortgage and showing our progress paying it off." class="post-img" />
<p>In <a href="https://twistoflemonpod.com/episode-8-if-you-dont-buy-milkshakes-with-your-money-save-for-a-house/">Episode 8</a> of <a href="http://twistoflemonpod.com">Life with a Twist of Lemon</a> my friend <a href="http://jonkohlmeier.net/">Jon</a> asked me about buying a house and for part of that discussion we talked about mortgages. One of the things that I mentioned our family does is visualize our mortgage on a piece of paper hanging on the side of our refrigerator. On the paper is a drawing of a house, which my lovely wife made to look like our actual house.  It’s on graph paper and each square represents part of the mortgage we owe. As we pay down the mortgage we fill in boxes, with the ultimate goal of having the whole house filled in. This idea didn’t originate with me; I don’t actually even recall where I first saw this. I think it’s neat though, and I like that it’s there every day for us to see. A few listeners (it still amazes me that we have those, thank you mom and the other 3 folks that tuned in) asked me what that mortgage visualization looks like, so I thought I would share it here. The colors don’t mean anything, they were chosen based on the closest colored pencil at the time. The shaded parts (roof and windows) also don’t count in our drawing. Anyone can do this too, and you don’t need to be as fancy with the drawing as Mrs. Lemon was. That said, I think ours is pretty cool and I’m just tickled with what she made for our family. Now to fill it up!</p>
<p>The purpose of the drawing and really a good portion of Jon’s and my discussion is understanding your debt and having a strategy to get rid of it. I don’t think debt is in and of itself a bad thing. In many instances it’s simply a necessity, like buying a house. I do think society is perhaps too comfortable with debt though and it’s good to go into something like a mortgage with a desire not to have it.  That desire is strong in me, and things like this visualization help keep it top of mind so that I am constantly being reminded to get rid of it.</p>
</description>
        <pubDate>Sat Sep 15 2018 14:24:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2018/09/15/visualizing-a-mortgage/</link>
        <guid isPermaLink="true">https://stanlemon.com/2018/09/15/visualizing-a-mortgage/</guid>
        
      </item>
    
      <item>
        <title>Life with a Twist of Lemon</title>
        <description><img src="https://stanlemon.com/assets/life-with-a-twist-of-lemon.jpg" srcset="/assets/life-with-a-twist-of-lemon.jpg, /assets/life-with-a-twist-of-lemon@2x.jpg 2x" alt="Life with a Twist of Lemon" class="post-img" />
<p>For more than a couple of years now my friend <a href="http://jonkohlmeier.net/about/">Jon Kohlmeier</a> has been trying to persuade me to start a podcast with him. We’ve routinely joked about it, but I’ve resisted getting it started because of time and other trivial things. Jon and I have been friends for well over a decade now and our roots to podcasting go way back. Jon was the cohost and producer of the <a href="https://itunes.apple.com/us/podcast/ht-legacy-cast/id1424483387">Higher Things Radio podcast</a> with another friend of mine, <a href="https://twitter.com/revborghardt">Rev. George Borghardt</a>. I appeared a number of times on that podcast, and there are more than a <a href="https://itunes.apple.com/us/podcast/ht-legacy-cast/id1424483387#">couple of episodes</a> where it is just Borghardt and I just shooting the breeze. I think that’s where the idea for Jon’s and my podcast came from, because really <a href="http://twistoflemonpod.com">Life with a Twist of Lemon</a> is just the two of us shooting the breeze. Jon likes to say we’re just recording the conversations we were going to have anyway, and if it wasn’t for the fact that we schedule the recording that’d probably be spot on.</p>
<p>So this is my latest project, a podcast where I just talk with my friend Jon. There’s nothing prescriptive about what we’re going to discuss fro one episode to the next. We’re going to try to keep it to thirty minutes or so, because we don’t particularly care for long podcasts ourselves. We plan to keep it fully rated G because I’ve got kids and I want them to be able to be safely in ear shot. Right now I’m having a lot of fun doing the podcast; more fun than I thought I would. If I’m lucky, we’ll get a listener other than my mom and dad, and if not then my kids can look back on this project in a few years and laugh about it.</p>
<p>Oh and about the name... as vain as I am, would you believe it wasn’t my idea? No, really! Jon came up with the name and, because I have no modesty in my blood, I happily obliged to using it.</p>
<p>You can find our podcast on <a href="https://itunes.apple.com/us/podcast/life-with-a-twist-of-lemon/id1419902908?mt=2">iTunes</a> and most likely whatever podcast app you’re using. I use <a href="https://overcast.fm/itunes1419902908/life-with-a-twist-of-lemon">Overcast</a>, a fantastic and free podcast for iOS, and recommend trying it out if you’re not already using a podcast app. The topic is constantly changing so pick an episode that interests you and give it a try, worst case scenario we’ve wasted thirty minutes of your time!</p>
<p>And apparently we've got a <a href="https://www.facebook.com/twistoflemonpod/">Facebook</a> and <a href="https://twitter.com/twistoflemonpod">Twitter</a> page too, if you're into that sort of thing. (Thanks Jon!)</p>
</description>
        <pubDate>Sat Sep 08 2018 16:45:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2018/09/08/life-with-a-twist-of-lemon/</link>
        <guid isPermaLink="true">https://stanlemon.com/2018/09/08/life-with-a-twist-of-lemon/</guid>
        
      </item>
    
      <item>
        <title>Ranking Star Wars</title>
        <description><p>Recently a friend of mine, <a href="https://twitter.com/revborghardt">Rev. George Borghardt</a> asked the internet to rank Star Wars movies, best to last. Presumably this was inspired by a discussion he and I had over some of Kentucky's finest just the week before.</p>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Arrange the Star Wars Movies from your favorite to your least favorite! Mine List: V, VI, VII, Rogue One, IV, III, I, II</p>&mdash; George Borghardt (@revborghardt) <a href="https://twitter.com/revborghardt/status/861035823055093760">May 7, 2017</a></blockquote>
<p>Some folks try to skimp on this and throw out Phantom Menace, Attack of the Clones and Revenge of the Sith as if they're not &quot;Star Wars&quot;, but here's the deal: <strong>They are.</strong> I don't think anyone in their right mind would dispute that they are of lesser quality than the original trilogy, Force Awakens and Rogue One. Nonetheless, they are canon!  I generally take the stance that the acting is horrible, but the underlying story is a valuable contribution to the galaxy. I'll go even further by saying that I'm a huge fan of The Clone Wars TV Show, and you don't get that without the prequels, which thus makes their cinematic presence worth it.</p>
<p>I'm going to cut to the chase, give you my list, and then explain why below.  Here they are from best to worst:</p>
<ol>
<li>Empire Strikes Back</li>
<li>Rogue One</li>
<li>A New Hope</li>
<li>Return of the Jedi</li>
<li>Force Awakens</li>
<li>Revenge of the Sith</li>
<li>Attack of the Clones</li>
<li>Phantom Menace</li>
</ol>
<hr>
<p><strong>Spoiler Alert:</strong> If you haven't seen <strong>ALL</strong> of the Star Wars movies then this is <strong>not</strong> the blog article you're looking for.</p>
<hr>
<p>I've never seen a respectable ordering of Star Wars movies where Empire wasn't first.  If you put Return of the Jedi ahead of it, say because you like Ewoks, then I would contend, you're not serious about Star Wars. There, I've said it!  But seriously, this is the movie that gave us AT-ATs, Bespin and Han Solo in carbonite! It's the movie that's awesome, even without a trench run and a moon-like killing machine. The characters are developed; they're building chemistry, and the story unfolds with you on the edge of your seat through every scene. Seriously, I just love this movie!</p>
<p>Some people are going to be shocked that I've put Rogue One so high, so let me defend myself a little here.  First off it's worth noting I might still be high on Stardust, but I really loved this movie! I felt the story itself was bold and well-developed. The movie as a whole stands on its own laurels.  The soundtrack is exquisite, especially considering that John Williams didn't score it! Chirrut has become my favorite Star Wars character (supplanting Chewie after years in first place).  There isn't a character in this movie I felt was poorly cast, and each was an excellent contribution to not only the film, but the franchise as a whole.  K2SO was a hoot and a half. Alan Tudyk did a fantastic job, and my only regret is that this is his only chapter in the universe. Speaking of which, they killed them all! This controversial way to end the movie was bold, and the clean bookends only enhanced the awesomeness of this tale. The battle scene at Scarif is amazing; easily the most thrilling CGI in the franchise. The little easter eggs from Rebels were delightful. The closing scene with Vader was truly ruthless, and the conclusion of this movie is a beautiful tie in to A New Hope - far more wonderful than I would have ever expected.  I'll say this in conclusion, I wasn't born by the time Return of the Jedi first appeared in theaters. I caught the theatrical re-release and while I loved them, only Force Awakens and Rogue One have been the Star Wars of my generation. Of the two, Rogue One is the movie that I walked away with goosebumps, excited about what this far away galaxy had in store for both me and my kids.</p>
<p>Again, I might be high on stardust, so I reserve the right to revisit this when I come down from cloud city.</p>
<p>I put A New Hope next, which might surprise some people but my reasoning is simple - this movie created the galaxy we know and love! The cinematography is amazing in this film, just stop and admire the camera art - it's stunning. This movie opens and we're immediately immersed in the story.  Stuff has happened, there's a history to the tale that's being told, a move unlike anything I can think of from its time. We get introduced to this evil machine man, our villain in the early moments, along with our heroine Princess Leia and the two comedic droids that transcend all of the Star Wars universe (seriously, they're the only characters in ALL of the films and show!). Most importantly there is nothing hokey about this movie (which is why it displaces the next film in my ordering); it's a true original and that's why I've ranked it here.</p>
<p>Return of the Jedi is great, but it's admittedly a little hokey at times. The ewoks, enough said.  But I do love this movie, and it's an excellent conclusion to the original trilogy.  This movie opens with Luke &quot;a Jedi knight&quot; (no longer a padawan still discovering the ways of the force) taking on the vile gangster Jaba the Hutt.  If you were watching this for the first time when it came out this was your first introduction to Jaba!  Unlike Empire, Return leans on a Death Star, which is not in and of itself bad, but is also why Return falls behind A New Hope for me.  If Return had been the first in the franchise I would have ranked it above A New Hope, but alas it's not and thus why it falls in this spot.</p>
<p>Force Awakens was an awesome reboot to this franchise. I love Rey's character, and Finn is an awesome wing man in this film.  While the movie starts a bit slow, it's an honest homage to the art which is A New Hope, all the way down to blowing up Star Killer Base with an X-Wing. Kylo Ren, by all measures, appears to be a formidable villain. I won't belabor all the excellent aspects of this movie, I'll just say this: Force Awakens is my generation's A New Hope, and in that vein it served it's purpose, but it's hardly an original story to the Star Wars Trilogy. While it bests the prequels (easily) it doesn't break above any of the original movies for me.</p>
<p>Revenge of the Sith is dark, so much so that George Lucas supposedly insisted it be rated PG-13, when all other Star Wars films had just been PG. Anakin is as creepy as ever, but the supporting cast is top notch.  This movie opens with a battle over Coruscant with some amazing camera angles, and then we get a glimpse into Anakin's struggle with the dark side as he slays Count Dooku.  Order 66 is a shocking scene that answers a long time question of the Star Wars universe: What happened to the Jedi? Lastly, Anakin's fall to the Dark Side, followed by his mutilation and finally his mechanical restoration concludes the prequels in the spirit of the original trilogy. We see the twins finding their homes in the galaxy, answering one of those burning questions from Return of the Jedi. Then to top it off, we get a glimpse of Lord Vader and the Emperor watching the construction of the ultimate weapon - a proper way to transition to A New Hope. This is a great capstone to the original trilogy.  For most of my life I believed that this is where Star Wars ended and I was pretty happy with that. If Force Awakens were never to have come out this would have been an excellent ending to an epic franchise.</p>
<p>The thing I remember the most about Attack of the Clones was that stupid scene on Naboo with Anakin and Padme frolicking through the field. This was Hayden Christensen's entrance into the Star Wars universe and his creepiness alone ruins the prequels for many people. But the truth is this movie tells us a lot about the Clones themselves, and sets up The Clone Wars TV show, which was truly fantastic. We also get our first glimpse into how Anakin struggles with the dark side as he slaughters the sand people on Tatooine. This glimpse helps the viewer transition from the cute little kid of the Phantom Menace into the evil tyrant of A New Hope. The battle scene on Geonosis is pretty much awesome, with Yoda commanding the Clones, &quot;A perimeter around the survivors create!&quot; Anakin gets his butt kicked in this one, but the scene is tensely awkward, with the only redeeming point being Yoda coming in and one upping Dooku in a way that only Yoda could. There's a glimpse of the Death Star in this one, a nugget into the backstory of the amazing killing machine that sets the scene for the original trilogy. If it wasn't for the Naboo scene it would be a close race with Revenge, but in the end it's hard not to call this movie cheesy.</p>
<p>Phantom Menace is the one unnecessary film in the franchise, and thus it should be no surprise it's in last place.  Its limited value is in Qui Gon and Maul, let me explain.  Qui Gon becomes critical in The Clone Wars to understanding how it is that Obi Wan comes back to Luke in the original trilogy. If you don't care how or why that is, then this point is moot. Ultimately the Qui Gon / Obi Wan communing through the living force is not super critical to the story line, it's just another facet told.  Onto Maul, he was the face of this movie's release in many respects. It seemed like every movie poster featured him when Phantom came out. He was scary and the face of the Dark Side and yet in reality his on screen presence was pretty pathetic. But Maul got a second life (almost literally) in The Clone Wars that continued on into Rebels.  Some of the best stories in those two shows involve Maul and so, while Phantom Menace is unequivocally last on my list, it's worth noting the significance it had on the animated series (which kick butt by the way). Now again, you can get by without this film and often when I'm telling folks what order to watch these I leave this one out, in hopes that it won't soil their perception of this awesome set of movies.  I would mention the ridiculousness of Jar Jar at this point, but the internet is filled with far better Jar Jar Hate than I could accomplish here.</p>
<hr>
<p>Ordering these movies is difficult. It's like asking, which is better: Godfather or Godfather II?  In the end you're forced to say they're both great and you can't bare to choose.  That's how I feel about the original trilogy. It's almost painful to order them, and I even find myself second guessing whether I did it wrong.  With great movies like Force Awakens and Rogue One coming out, it gets even harder! That said, I've done it and I even feel pretty good about it, too!  <em>But whatever you do, please don't ask me to rank the Marvel movies!</em></p>
</description>
        <pubDate>Sun May 07 2017 19:06:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2017/05/07/ranking-star-wars/</link>
        <guid isPermaLink="true">https://stanlemon.com/2017/05/07/ranking-star-wars/</guid>
        
      </item>
    
      <item>
        <title>The Star Trek Litmus Test</title>
        <description><p>I recently went on a bit of a Twitter rant with a friend over the release of Star Trek Beyond. This is the third installment in the reboot, and unequivocally the worst.  My original tweet which sparked the discussion read, &quot;Beyond was a good action movie, but it wasn't Star Trek.&quot;</p>
<p>I've not been shy with my friends that I am NOT a fan of the reboots. It's not because they erased the timeline of four shows and ten movies. I actually thought that was a clever way of rebooting the franchise. I'm just not sure it needed to do that. I personally would have been fine if they rebooted it the same way that Christopher Nolan did Batman out of the ashes of George Clooney and Val Kilmer. Nonetheless, I could live with erasing the timeline if the story had been capable of standing on its own without the assistance of Old Spock. Now, let's say for a minute I could live with this story resting on the laurels of Old Spock.  And let's say I could even stomach JJ Abrams throwing the camera all over every scene while flooding my eyes with lens flares.  Even if we write off all these things, the reboots still lost all credibility because of the second movie.</p>
<p>The second reboot took what is, in my estimation, the unequivocal best Star Trek movie ever and plagarized the story in a gross abuse of the franchise. I didn't like Star Trek Into Darkness at all. This was not a new movie, but it was presented that way. The decision to kill off Kirk, and then to resurrect him in the way they did seemed overly forced. Rather than be an homage to the Wrath of Khan it felt more like an insult to it. It was at this point that I realized the franchise might actually be in worse hands than when Rick Berman took over after Roddenberry's death.</p>
<p>Now let me be clear about something. I'm a green blooded Trekkie. I grew up on TOS reruns and then watched Star Trek The Next Generation as it was syndicated on UPN in Chicago (anyone still remember WPWR?). Every Christmas, Easter, Birthday and even one Hanukah was marked with Star Trek action figures. I actually look back and think, oh yeah Christmas 94 that  was <a href="https://www.amazon.com/Star-Trek-Next-Generation-Ambassador/dp/B0009P7HZC">Sarek's</a> year. Oh and by the way, my son's middle name is Tiberius and my dog's name is Dax.</p>
<p>Back to the third reboot. It was terrible, for a Star Trek movie. It might have made a decent action flick, but I went into a preshow intending to judge it as a Star Trek movie and it came up short. Spoiler Alert: This film is incapable of standing on its own merits. Old Spock again has to be dragged into the story in order to give New Spock any depth, even though Leonard Nimoy has passed away and all they can do is show his picture. (My wife thinks they were trying to give Nimoy a nod here, I think the dedication at the end was sufficient). Krall's backstory was hollow and Jaylah's was absent from the story line altogether. The story of the Franklin is never really answered for us, and yet that seems important. Worse yet is we're left wondering, how did all these other people make it to a planet that we're told is unable to be reached by anything less than the navigation systems of the Enterprise. Yorktown is like something out of an MC Escher drawing, except Yorktown would never be confused for art. Where was the utopianism Star Trek is known for? Where was the moral discussion of right and wrong as some crew member faces an impossible decision? The closest thing we had to any character inflection in this movie was Kirk debating whether or not he wanted to take a job that he actually applied for. Lastly, would it have been possible to write the third Star Trek movie in a series without blowing up the Enterprise? I guess we'll never know.</p>
<p>As I've been debating the merits, or really the lack thereof, of Star Trek Beyond I find myself questioning whether or not these people can really be considered Trekkies.  You may think that's harsh, but this is scifi and I take it very very seriously. Thus, I've done what any true Trekkie would naturally do: I came up with a Litmus test.  Here's my formula for evaluating whether or not your friends, family, and adversaries alike are honest Trekkies.</p>
<p>First, if they have not actually seen every episode of TOS and TNG they are immediately disqualified. I think you can make a case that you must have seen DS9, sufferred through the misery of Voyager and survived Enterprise, but I'm feeling generous today so we'll keep it to TOS and TNG. I should qualify this; if they have to think about it they've failed. I only lose track of Star Trek episodes after I've seen them more than 30 times. I once wore out a VHS recording of Relics.</p>
<p>Second, it should be a given they've seen every Star Trek movie ever made, period. There's no room to budge on this. Do not accept excuses that they skipped out on Insurrection or the Motion Picture as if that's tolerable. The line must be drawn here! This far, no further!</p>
<p>Third, ask them what the best Star Trek movie is? Any pause before saying Wrath of Khan should be treated with suspicion. There's not much more I can say about this. If for some reason you disagree, I recommend you stick to Dr. Who.</p>
<p>Fourth, ask them what the best Star Trek The Next Generation movie is. First Contact. If you think I need to explain this, I hear the 1998 Lost in Space was fantastic. So fantastic in fact that neither Amazon or Netflix could get the licensing to offer it over their streaming services.</p>
<p>Five, ask them what their favorite TOS episode is. On this one I personally accept three answers. <em>Sidebar: Top 10, 20, 25, 42 episode lists of Star Trek seem to be universally awful. Reject any list that attempts to order all the series together. Especially reject any list that actually includes a Voyager episode.</em> For me the three TOS options I accept are:</p>
<ul>
<li>Space Speed</li>
<li>Trouble with Tribbles</li>
<li>The Tholian Web</li>
</ul>
<p><em>I've long debated adding Mirror, Mirror. In my old age I've become more generous so I'd take this one as an honorable mention and give the Trek-anidate a second shot to name one of my three.</em></p>
<p>Six, ask them what their favorite TNG episode is. Again, I accept three answers for this one:</p>
<ul>
<li>Best of Both Worlds pt. 1 &amp; 2 (There are times when I really think this should be the only answer I accept)</li>
<li>Unification (Reboot should have watched this and taken notes. This is how you tie in an old cast with style!)</li>
<li>Chain of Command (How many lights are there?)</li>
</ul>
<p>Seventh, ask them what their favorite DS9 episode is. Did you think that because I didn't require watching all of DS9 in the first test you wouldn't be on the hook for it? Nice try. Any answer that's not from Season 6 is wrong. Period. My go-tos are Sacrifice of Angels and In the Pale Moonlight. This is arguably some of the best Star Trek ever written.</p>
<p>Eighth, and this is the last one, what's the worst episode of Enterprise? A Night in Sickbay. Sometimes I think this is the episode where Berman killed Star Trek. But hey it could have been worse, it could have been Voyager's Threshold!</p>
<p>Judge the Trekkies around you. Impersonators will not be tolerated, resistance is futile!</p>
</description>
        <pubDate>Sun Jul 24 2016 18:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2016/07/24/the-star-trek-litmus-test/</link>
        <guid isPermaLink="true">https://stanlemon.com/2016/07/24/the-star-trek-litmus-test/</guid>
        
      </item>
    
      <item>
        <title>Bluetooth and the Survival of the Fittest</title>
        <description><p>I am a strong believer that the power of the internet is best leveraged when it is used for funny memes, pictures of cats, and that really amazing video about Tom Brady’s balls. However, I feel that I need to break from my strong belief about the internet for a moment and instead bend it to my will and rant.</p>
<p>Recently while chatting with a friend I regurgitated a sentiment from a tweet I saw, or maybe it was on a blog I read or quite possibly a Podcast I heard. Honestly the source doesn’t matter, this is the internet and attribution died along with academic citations. Long live Wikipedia! I digress. So this sentiment was mine, despite having found it elsewhere. What was this profound sentiment you ask? Simply that while we have all this awesome technology that resembles the Science Fiction of my youth, I do not recall there ever being so many cords… Did you ever see someone charge Data? Or plug a tricorder into the wall? Where was Luke’s light saber docking station? At the time I was reflecting I considered this as a weakness of the evolution of technology. I believed that we had not yet achieved that synergistic point where real life and Science Fiction merged in an amazingly beautiful union where neither was distinguishable from one another.</p>
<p>Then I was driving today and I realized that if the evolution of humanity is determined by the survival of the fittest it’s actually those still yielding cords in their vehicles that will survive. It will be the heavily corded souls ruling the road that will define future generations. Which means Science Fiction is all a lie.</p>
<p>Bear with me while I explain. We are all worried about teen drivers (and some half brained adults like myself) texting while on the road with their mobile devices. This fear does not seem misplaced, especially when people are carrying devices so large that they must use two hands with them. Many states have even gone so far as to pass laws prohibiting using your mobile devices while in moving vehicles. As I’m sure you know, these laws are religiously followed and obeyed by all of man kind - at least any God-fearing Patriot. I postulate that texting while driving is hardly the thing we should fear most about today’s roads. It’s actually bluetooth!!! Years from now we will look back and realize that the rollout of bluetooth was actually a genocide stunting the growth of the population! There is nothing more perilous than to be in a moving vehicle whimsically believing in the dream that your car and some other device will communicate in perfect harmony. When this fails, and it always does, you find yourself speeding down a highway (or as in my case a far too narrow country road with steep ditches on either side) trying to reconcile why two devices which say they can talk to each other simply will not work! The rage builds up inside, you dismiss the heavily federally regulated dialog that says only passengers should pair devices in moving vehicles, and you fight the never-ending battle of bluetooth hell that rages all about the vehicle you reside in. And may God have mercy on your soul if there are more than one device involved in this awful union of technology.</p>
<p>Bluetooth will kill us. One by one we will succumb to stupidity on the road. Only the cord bearers will survive this awful twist of human evolution. Science fiction was all a lie. Wireless and charger-less devices have no basis in our technological future. They are simply a figment of a wonderful play of fantasy that is less likely to be realized than an ice queen who sings on mountain tops. Give up, just plug your damn device in.</p>
<p>Congratulations if you’ve made it this far. You are part of the few, the proud, those that can read more than 140 characters on the internet. Go buy yourself a beer!</p>
</description>
        <pubDate>Sat Dec 05 2015 20:06:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2015/12/05/bluetooth-and-the-survival-of-the-fittest/</link>
        <guid isPermaLink="true">https://stanlemon.com/2015/12/05/bluetooth-and-the-survival-of-the-fittest/</guid>
        
      </item>
    
      <item>
        <title>LemonRestBundle 0.8.0</title>
        <description><p><a href="http://github.com/stanlemon/rest-bundle">LemonRestBundle 0.8.0</a> has been released. The theme for this version is <strong>compatibility</strong>. While several significant bugs have been fixed since the last release, the focus has been primarily on ensuring that the bundle is compatible with a wide range of versions of PHP, Symfony and Doctrine. Additionally the bundle now comes with support for MongoDB and better support for other implementations of Doctrine.</p>
<h4>Compatibility with PHP</h4>
<p>LemonRestBundle now supports PHP 5.3, 5.4, 5.5, 5.6. Additionally the primary ORM test suite passes when using Doctrine 2.5 on HHVM and HHVM nightlies. Tests are also actively being run against PHP 7, though compatibility will not be guaranteed until after it is stable.</p>
<h4>Compatibility with Symfony</h4>
<p>LemonRestBundle now supports Symfony versions 2.3, 2.4, 2.5 and 2.6. Additionally, preliminary support has been made for 2.7. While 2.7 is not currently running in Travis CI, if you use it in your projects it will work.</p>
<h4>Compatibility with Doctrine ORM</h4>
<p>LemonRestBundle now support Doctrine ORM 2.3, 2.4 and 2.5 In general it is recommended you use 2.5 whenever possible.</p>
<h4>Compatibility with Doctrine MongoDB ODM</h4>
<p>LemonRestBundle now works with <a href="http://doctrine-mongodb-odm.readthedocs.org/en/latest/">Doctrine MongoDB ODM</a>! There are tests specifically for the mongo implementation and they are running in TravisCI.</p>
<p>Except where indidcated, all of these versions and combinations of these versions are being tested against automatically in TravisCI. <a href="https://travis-ci.org/stanlemon/rest-bundle">You can always check the builds out here.</a></p>
<p><em>Update to the latest version of LemonRestBundle and let me know what you think!</em></p>
</description>
        <pubDate>Tue Apr 07 2015 22:52:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2015/04/07/lemonrestbundle-0-8-0/</link>
        <guid isPermaLink="true">https://stanlemon.com/2015/04/07/lemonrestbundle-0-8-0/</guid>
        
      </item>
    
      <item>
        <title>Adding PATCH to LemonRestBundle</title>
        <description><p>Work on <a href="http://github.com/stanlemon/rest-bundle">LemonRestBundle</a> continues, last night I merged in support for PATCH. This is an interesting beast because there are some strong opinions on the proper way to implement PATCH in a REST API. Initially I assumed I would just avoid it rather than subject myself to the judgment of poor implementation. However, the more I researched PATCH the more I realized that I wanted to add it, and furthermore the strong opinions were largely academic in nature. The <a href="https://tools.ietf.org/html/rfc6902">JSON Patch specification</a> is rather powerful but also complex, I've yet to find a consuming client that actually supports this standard. What I see a lot of is more akin to the <a href="http://tools.ietf.org/html/draft-ietf-appsawg-json-merge-patch-07">JSON Merge Patch specification</a>, and this is exactly what I've decided to add. Truthfully the bulk of the work in my implementation happens in JMS Serializer. I need to do more extensive testing on object nesting but the basic implementation works right now. One issue to keep in mind is the current setup requires you to specify the object id when in the PATCH request. I hope to fix this in the future, but for now that's the requirement.</p>
<p>I've also recently added the ability to customize the Criteria object for searches.  The Criteria object is basically a collection of the query parameters and it gets used by the ObjectManager to add filtering to the findBy() command used for making collections of a given resource. Out of a set of query parameters the default implementation separates out some data for limit, offset, order by and order direction and then provides those in a standard way to the ObjectManager. The limiting factor in the initial implementation is that you might not have liked the fields I was using for limit, offset, etc. Customizing the Criteria object gives you full control over how this is handled. You can read more about how to configure this in the bundle's documentation.</p>
<p>I've been experimenting with generating <a href="http://swagger.io">Swagger</a> docs within my bundle. I would expect this to materialize in the next week or so.  The technical details are already available to generate the docs, it's the descriptive data that isn't there yet and I'm still evaluating the best way to make that possible. Ultimately I'd love to have the bundle help it's users generate documentation for their APIs, eliminating yet one more detail in the management of a REST API.</p>
<p>Last but not least there I think it's safe to expect support for versioning, again this will largely be driven off of JMS Serializer's version exclusion groups.</p>
<p>Work on the bundle continues to move forward. Several folks have made contributions, all of which I am really grateful for! If you have a suggestion, recommendation or spotted a bug of any sort please open an issue over on GitHub.</p>
</description>
        <pubDate>Fri Oct 17 2014 03:05:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2014/10/16/adding-patch-to-lemonrestbundle/</link>
        <guid isPermaLink="true">https://stanlemon.com/2014/10/16/adding-patch-to-lemonrestbundle/</guid>
        
      </item>
    
      <item>
        <title>Demoing LemonRestBundle with ng-admin</title>
        <description><p>tl;dr <a href="http://restdemo-stanlemon.rhcloud.com/#">You can try out LemonRestBundle with ng-admin here.</a></p>
<p>Last week I shared that I was working on a <a href="github.com/stanlemon/rest-bundle">Symfony 2 bundle that would create REST end points from Doctrine entities</a>. I've been continuing to work on that bundle, adding features and flexibility and I decided to re-evaluate the way I was demoing it. The truth is that I didn't want to sink a lot of time into writing a demo, but I also want to do a show more functionality than just pulling down some objects from and dumping them to a page. What I want is to show the full REST life cycle, getting, searching and saving objects to an api. Fortunately there's a really great tool out there that plugs into a REST api and does just that! It’s called <a href="https://github.com/marmelab/ng-admin">ng-admin</a> and it’s from the folks over at <a href="http://marmelab.com/">Marmelab</a>.</p>
<p>For those that aren't familiar with <a href="https://github.com/marmelab/ng-admin">ng-admin</a>, it's a tool written using <a href="https://angularjs.org/">Angular</a> and it allows you to easily wire up a &quot;stock&quot; UI for a REST API. Like my own project, it's opinionated and convention oriented. Quite honestly it's a pretty cool tool. So I’ve hooked it up to a symfony standard application with the <a href="github.com/stanlemon/rest-bundle">LemonRestBundle</a> and configured some entities to match <a href="ng-admin.marmelab.com">Marmelab’s own demo</a>. I also pulled the sample data down that Marmelab was using and stuck it in a sqlite database. The database resets every minute, but it’s enough time to create a post and edit some comments and see <a href="https://github.com/stanlemon/rest-bundle">LemonRestBundle</a> in action. The really cool part is when you take a look at the demo app’s GitHub repository and realize <a href="https://github.com/stanlemon/rest-demo-app/tree/master/src/Lemon/RestDemoBundle/Entity">it took three Entity classes to make the whole thing happen</a>.</p>
<p><a href="http://restdemo-stanlemon.rhcloud.com/#/list/post">I’ve deployed the demo over at OpenShift so you can take a look and try it out for yourself.</a> You can also clone the <a href="https://github.com/stanlemon/rest-demo-app">demo app from GitHub</a>, run composer.phar install and try it yourself!</p>
<p><strong>Links to check out:</strong></p>
<ul>
<li><a href="http://github.com/stanlemon/rest-bundle">LemonRestBundle for Symfony</a></li>
<li><a href="http://github.com/stanlemon/rest-demo-app">Demo app repository for LemonRestBundle</a></li>
<li><a href="http://restdemo-stanlemon.rhcloud.com">Live demo of LemonRestBundle on OpenShift</a></li>
<li><a href="https://github.com/marmelab/ng-admin">ng-admin by Marmelab</a></li>
</ul>
</description>
        <pubDate>Wed Oct 08 2014 01:40:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2014/10/07/demoing-lemonrestbundle-with-ng-admin/</link>
        <guid isPermaLink="true">https://stanlemon.com/2014/10/07/demoing-lemonrestbundle-with-ng-admin/</guid>
        
      </item>
    
      <item>
        <title>LemonRestBundle for Symfony</title>
        <description><p>For a little while now I’ve been working on a bundle for Symfony to easily create REST apis for <a href="http://www.doctrine-project.org/projects/orm.html">Doctrine</a> entities. My goal was to be able to create a REST api with nothing more than a Doctrine entity and it’s metadata, including custom metadata from bundles like <a href="http://jmsyst.com/libs/serializer">JMS Serializer</a>. I wanted to invest very little time in the actual api part, and get to writing applications that used it. I’ve hit this wall before, and inevitably what happens is I make a valiant effort at rolling a REST api and then get distracted or bored and walk away leaving the project to rot.</p>
<p>Recently I was resurrecting an older project and wanting to do right by it and decided I could mask a lot of my database worts by leveraging some of Doctrine’s more advanced features. Specifically I added <a href="http://doctrine-orm.readthedocs.org/en/latest/cookbook/custom-mapping-types.html">custom types</a> to ensure I had good data structures, leveraged some <a href="http://doctrine-orm.readthedocs.org/en/latest/reference/events.html">lifecycle events</a> and implemented <a href="http://doctrine-orm.readthedocs.org/en/latest/tutorials/embeddables.html">Doctrine 2.5’s recent addition of Embeddables</a>. I had also added a bunch of validation to my entities using <a href="http://symfony.com/doc/current/book/validation.html">Symfony’s Validation component</a>, so they were well defined and could be validated easily with meaningful responses when things weren't right. I wound up with a clean set of objects that did what I wanted well, but there was one problem, I needed an api! Having been down this road before I wanted to solve my problem for the last time, or at the very least make the problem more interesting to solve.</p>
<p>Recently I have been playing with <a href="https://github.com/KnpLabs/KnpJsonSchemaBundle">Knp’s JSON Schema bundle</a> and this was in part my inspiration to make something that was <em>magical</em>. I don’t mean magical in the buzz word sense (okay, maybe I do). I mean magical in the highly <em>opinionated</em>, <em>convention driven</em> sort of way. My solution needed to <em>just work</em>(tm). The pieces were all there, and as I mentioned earlier the bulk of the tooling already existed, specifically great serialization, easy validation, reliable content negotiation and of course the graph traversal of Doctrine itself.  I just needed to get it all hooked into the request/response process of an api. Thus begot my very own REST bundle for Symfony 2.</p>
<p>Now hold up, I know what you’re thinking... Symfony already has <a href="https://github.com/FriendsOfSymfony/FOSRestBundle">a REALLY good REST bundle from Friends of Symfony</a>, doesn’t it? This is very true! That is an excellent bundle, it’s high powered and very flexible. <strong>Mine is not</strong>. In fact it’s not even intended to be. If you want <a href="https://github.com/willdurand/Hateoas">HATEOAS</a> for example, FOSRestBundle is the right option for you. If you need to customize the POST/PUT processes or alter extensively the behavior of your GET actions, then FOSRestBundle is going to be a far better option for you. If you want to use <a href="http://propelorm.org">Propel</a> or <a href="http://doctrine-mongodb-odm.readthedocs.org/en/latest/">Mongo</a> (though that may come in the future for mine) or any other data source besides Doctrine ORM than FOSRestBundle is the better option for you. If you are using Doctrine ORM and want to write as little code as possible while getting some REST endpoints, than my bundle might be the better option for you.</p>
<p>Enough chatter, <a href="https://github.com/stanlemon/rest-bundle/blob/master/Tests/Fixtures/Person.php">take a look at the fixtures included in my bundle</a> and you’ll see some very simple examples of what sort of metadata driven modeling I had in mind for this project. <a href="https://github.com/stanlemon/rest-bundle/blob/master/Tests/Controller/RestControllerTest.php">I have a pretty extensive functional test that shows how the bundle works.</a> I’ve also built a simple example application using this bundle that you can take a look at and see the bundle working. Well without further delay, I'm really happy to share with you <a href="https://github.com/stanlemon/rest-bundle">LemonRestBundle</a>, <a href="https://github.com/stanlemon/rest-bundle/blob/master/Resources/doc/index.md">documentation included</a>! Feedback is very welcome, feel free to drop me an email or <a href="http://twitter.com/stanlemon">shoot me a message on twitter</a>.</p>
</description>
        <pubDate>Thu Oct 02 2014 22:24:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2014/10/02/lemonrestbundle-for-symfony/</link>
        <guid isPermaLink="true">https://stanlemon.com/2014/10/02/lemonrestbundle-for-symfony/</guid>
        
      </item>
    
      <item>
        <title>Why Symfony 2.5 is important</title>
        <description><p><a href="http://symfony.com/blog/symfony-2-5-0-released">Symfony 2.5 was released on June 1</a>. I've been following blogs and listening to podcasts about the release and there are a lot of really awesome additions in this release. But there is one feature in particular that I don't believe is getting enough attention and deserves some.</p>
<p>Back in April I wrote about my frustration with <a href="/2014/04/13/symfony-and-absolute-paths/">Symfony &amp; Absolute Paths</a>. I was excited to see in May that this concern found <a href="https://github.com/symfony/symfony/pull/10894">itself into an official GitHub issue and PR</a> and that it might get resolved in a future release of Symfony.  Well it has, and burried under the notes for 2.5 RC1 is this, &quot;bug #10894 [HttpKernel] removed absolute paths from the generated container (fabpot)&quot;.</p>
<p>Quite frankly, this is <strong>huge</strong>!  After my post in April I hacked together what I was calling a <em>PathlessKernel</em> to work around this issue.  I basically regex'ed out the application root from the container. In my opinion this was an inelegant solution and thus I chose not to share it. The fix in #10894 is far superior and allows for the regenerating of cache in a CI environment before deployment without all of the path chaos previously created when dumping the container.</p>
<p>This is a big win for Symfony as it makes an application build artifact truly portable!</p>
</description>
        <pubDate>Mon Jun 16 2014 23:16:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2014/06/16/why-symfony-2-5-is-important/</link>
        <guid isPermaLink="true">https://stanlemon.com/2014/06/16/why-symfony-2-5-is-important/</guid>
        
      </item>
    
      <item>
        <title>Review: Extending Symnfony</title>
        <description><p><a href="http://www.packtpub.com/extending-symfony-2-web-application-framework/book">Extending Symnfony</a> by Sébastien Armand is a tutorial-style introduction to a variety of the ways that you can extend a Symfony 2 full stack installation. I’m a big fan of Symfony 2 and I’ve done a fair amount of app building with it, so I was interested in Armand’s book and seeing what new things I could discover about hooking into sf2.</p>
<p>The book is filled with code samples, far more than you’ll find in most other technical books. Most of these code samples are also complete, which anyone who has traversed the official Symfony 2 cookbooks will greatly appreciate. Unfortunately, these code samples sometimes cross pages in inconvenient ways, and none of them include syntax highlighting which can make it hard to read at times.</p>
<p>Armand tackles six (sort of eight) areas of Symfony 2 development where developers can tap in and extend existing functionality of Symfony 2. First and foremost he kicks off his tutorials with covering service definitions and listeners. These topics seem like they could have been separate chapters to me, but nonetheless he does a good job of giving real world examples of how to tie these things in. He especially does well with event listeners - the secret weapon of the Symfony 2 stack (in my opinion anyhow).</p>
<p>Armand’s approach to extending symfony is project-based, meaning that through the book you’re working on building an app that handles some details for meet ups between users. You can think of it like the old Symfony 1 Askeet tutorial. This is a huge advantage of Armand’s book over other Symfony 2 texts you’ll find in the wild. Actual applications create context and drive home the concepts. As an added bonus, in this book you are NOT building yet another task manager!</p>
<p>The Security chapter covers some of the more difficult areas of Symfony 2. Anyone who has dealt with Security in sf2 knows that, while extremely powerful, it can also be extremely challenging. Armand’s examples are helpful, especially as he tackles an OAuth implementation. Armand uses the Friends of Symfony UserBundle to get going, but unfortunately didn’t cover with too much depth getting started with this super handy bundle. The examples in the book are priceless, but I look forward to future revisions that cover the new SimpleAuth implementation in Symfony 2. The only other thing I wished Armand would have covered was securing an api with tokens and a custom user provider for doing this. He shows how a cookie can be used with an event listener, but truthfully there are better ways of tackling this problem in Symfony 2 that are more consistent with its security model.</p>
<p>One of the most valuable chapters in this book is the Doctrine chapter. Doctrine 2’s official documentation lacks a lot of context. By being a project-based tutorial, Armand actually shows you how to write a custom data type, custom DQL function, and a custom filter, rather than stumble through the Doctrine 2 docs and hope you got close. This chapter in and of itself is a valuable resource for those times when you need to do these things.</p>
<p>The final chapter discusses bundles briefly. This is one area of the book I felt could have been fleshed out a bit more. Armand covers the basics, but part of me felt like this chapter almost belonged at the beginning of the book instead of the tail end. The other thing that was missing from this chapter was bundle inheritance which, while a tricky subject, is a huge part of extending a Symfony 2 application.</p>
<p>All in all I think this is a solid book on tapping into some of the more powerful features of Symfony 2 and it’s counterpart Doctrine 2. The book is at times a little oddly organized, but the code samples and tip are worthy any web developers time. If you’re looking to dive into some of the things in the book’s table of contents get yourself a copy and profit from Armand’s tutorials and extensive code samples.</p>
</description>
        <pubDate>Thu Jun 12 2014 19:38:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2014/06/12/review-extending-symnfony/</link>
        <guid isPermaLink="true">https://stanlemon.com/2014/06/12/review-extending-symnfony/</guid>
        
      </item>
    
      <item>
        <title>A Review of Pley & Renting Legos</title>
        <description><p>I recently decided to signup for <a href="http://pley.com">Pley</a>, a service that supplies lego sets by mail for a monthly membership price.  They advertise that you're safe to lose a piece or two and that the kits are always sanitary using their special <em>FDA grade</em> process.  Unfortunately I found both of these claims to be <strong>false</strong>.</p>
<p>First off let's set the record straight, I'm an adult Lego geek. That's a technical term, you can check me on it. As a kid I had a vast array of sets and spent countless hours constructing my dreams. Then I went to High School, College and got married and had mostly forgotten about Legos.  Until I took a job where I was working on the hosting infrastructure used by the Official Lego Podcasts, like <a href="https://itunes.apple.com/us/podcast/lego-hero-factory-channel/id372652372?mt=2">this one</a>.  Suddenly I had an excuse to play with Legos again, it was work related after all...</p>
<p>I've collected a few sets as an adult, and I fully admit to playing with them from time to time.  <em>I'm not ashamed.</em> When I saw Pley I thought it could be the perfect <em>life-as-a-service</em> for my late night hobby.</p>
<p>I went through the trial and the first set I got was a total bust. The <a href="http://shop.lego.com/en-US/Desert-Skiff-9496">Desert Skiff</a> came in the mail and I started piecing it together.  Normally I try to avoid the directions as much as possible, as that adds to the general fun of the puzzle.  But on this one though I had to pull out the book. This probably sounds a little crazy since it's only a 213 piece set, but hear me out. As it turns out the set was missing pieces, to the tune of at least 10! I finally couldn't finish the set because there were so many missing. I logged online an reported the missing pieces and sent the set back in.  I admit that out of frustration I didn't pull everything apart. I hadn't heard back from Pley until this week when they sent this email to me.</p>
<blockquote>
<p>Hi Stan,</p>
<p>We hope you are enjoying Pley. We have received your set today. Thank you!</p>
<p>To keep kids happy, we ask all users to disassemble the sets to individual pieces so that each child has the same building experience with no sets arriving partially built.</p>
<p>Here is a note we received from on of our Pleyers:</p>
<p><img src="https://stanlemon.com/assets/talsletter.png" alt="Tal's letter:can you separate piece"></p>
<p>We appreciate you taking a few extra minutes to separate each piece so that other children can enjoy the set equally.</p>
<p>Thanks for Pleying!</p>
<p>The Pley Team</p>
</blockquote>
<p>I'm a little more than flabbergasted. I didn't get any replies when I filed a missing-part list! On their website they say, <em>&quot;Lost a piece? No worries. We won't charge.&quot;</em> What they don't say is, &quot;The next guy might be out of luck though!&quot; Furthermore, if their process is so clean how did this kid <em>Tal</em> get the set still stuck together? How do they know I didn't stick a booger between those blocks?  And really what are they doing sending this kid's letter to me? Surely this is some kind of privacy violation!</p>
<p>The thing I really miscalculated though was thinking that renting one set at a time would somehow pacify my burning desire as a Lego-master to mix and match multiple sets. There simply is nothing better than owning your sets, period.</p>
<p>Unfortunately I just can't recommend this service.  Yeah, it's partially out of bitterness, but I also feel like I've been lied to. So keep buying on Amazon, or Target or wherever it is you get your Lego-fix and steer clear of Pley!</p>
</description>
        <pubDate>Fri May 23 2014 01:31:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2014/05/22/a-review-of-pley-renting-legos/</link>
        <guid isPermaLink="true">https://stanlemon.com/2014/05/22/a-review-of-pley-renting-legos/</guid>
        
      </item>
    
      <item>
        <title>jGrowl 1.3 & 1.4</title>
        <description><p>About a week ago I released v1.3 of <a href="https://github.com/stanlemon/jGrowl">jGrowl</a>. This is for all intents and purposes a maintenance release, containing primarily packing info for npm and bower, as well as a Grunt config for future development. More importantly is that the '<em>develop</em>' branch is underway and this contains some significant changes to the plugin.</p>
<p>The 1.4 release intends to address the following things:</p>
<ul>
<li><em>LESS</em> for CSS</li>
<li>Remove IE6 support</li>
<li>Easily use <a href="http://getbootstrap.com">bootstrap</a> and include examples</li>
</ul>
<p>These things are currently available for testing, simply pull 'develop' and give it a spin.</p>
<p>Additionally I am very happy to share that the <a href="http://bower.io/search/?q=jgrowl">jGrowl package on Bower</a> now points at the correct repository, meaning you can easily add jGrowl to your project using this excellent package manager.</p>
<p>Lastly, while most of the development on 1.4 is complete I am hoping at some point to work on automating some tests of the plugin. If you have experience doing this with jQuery plugins I would welcome advice, insight or better yet - pull requests.  If you have any feedback on either 1.3 or 1.4 please don't hesitate to drop me a line.</p>
</description>
        <pubDate>Mon Apr 28 2014 00:20:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2014/04/27/jgrowl-1-3-1-4/</link>
        <guid isPermaLink="true">https://stanlemon.com/2014/04/27/jgrowl-1-3-1-4/</guid>
        
      </item>
    
      <item>
        <title>Aura.Sql & Existing PDO connections</title>
        <description><p>I'm pretty excited about a contribution I recently made to <a href="http://github.com/auraphp/Aura.Sql">Aura.Sql</a>.  For those not familiar with <a href="http://auraphp.com">Aura</a>, it's the brain child of <a href="http://paul-m-jones.com/archives/4757">Paul M Jones</a> (a decent dude despite his hate for design patterns starting with the letter F) and strives to be a set of standalone components with no outside dependencies and 100% test coverage. Aura.Sql v2 is also known as ExtendedPdo, and it's a drop in replacement for PDO.  The idea is it gives you some extra giddy up in your database tooling, via lazy connections, short hand helpers and a basic profiler. I've found this especially helpful on a couple of projects where I have a bunch of technical debt and an antiquated ORM.  The problem is database connections are expensive and opening up a new one via ExtendedPdo is not always feasible.  My contribution to this project was the ability to decorate or wrap an existing PDO instance so that you could pull the raw connection from another system and use it without reconnecting to the database.  This is an idea I got from Doctrine 2, which offers similar support by passing in an existing instance object.  This is a particularly handy feature when refactoring a legacy code base.</p>
<p>If you're getting off the ORM band wagon, or dealing with some poorly performing legacy code you're trying to refactor take a look at Aura.Sql, it's right tool for the job.</p>
<p><a href="https://gist.github.com/stanlemon/10692955">https://gist.github.com/stanlemon/10692955</a></p>
</description>
        <pubDate>Wed Apr 16 2014 22:51:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2014/04/16/aura-sql-and-existing-pdo-connections/</link>
        <guid isPermaLink="true">https://stanlemon.com/2014/04/16/aura-sql-and-existing-pdo-connections/</guid>
        
      </item>
    
      <item>
        <title>Symfony & Absolute Paths</title>
        <description><p>My love affair with <a href="http://symfony.com">Symfony</a> 2 has hit a rocky spot. I have an atomic deployment system for a Symfony 2 app that I've been working on.  Basically it works like this... The app gets built on my CI server, <a href="https://www.atlassian.com/software/bamboo">Bamboo</a>. That build results in an artifact, a tarball of the entire application.  This tarball is intended to represent the final product, meaning tests have all been run - they passed - and any compilation steps have been executed.  But I've got a problem.  It comes when I try to warm the cache or more generally if I run any Symfony console command on the build system before the artifact is made. This includes things like installing <a href="http://symfony.com/doc/current/cookbook/assetic/index.html">Assetic</a> dependencies.  To work around my problem I've been making sure my 'cache' folder is empty before I build the tarball.  I wind up crossing my fingers on the deploy step and trusting that things will work themselves out when the cache is warmed and the container is compiled on the application server.  This is a horrible solute.  It's one I'm forced to deal with because of the way Symfony 2 dumps it's dependency injection container.  The container dump compiles references to <em>%kernel.root_dir%</em> which is an absolute path to the application root. That path is different on my CI server than it is on my production application server. If I compile the container on the CI server I wind up with a dump file that has the wrong absolute paths, resulting in a non-function app.</p>
<p>Some may want to question not doing the build on the application server if this is a problem. That may work for some people, but I think it's wrong to assume it's going to be possible in every deployment scenario.  There are simply a lot of regulated industries where building on the application server simply is not going to pass an audit. In my experience both in the PCI and Hippa worlds this simply wouldn't have worked.  You may disagree, but the reality is when you get into sorts of regulated environments you are playing by someone else's rules, even if they're silly rules. Furthermore, this solution does not scale.  It works for small clusters, but there's a point at which it simply is too long to roll that sort of deployment process out across a datacenter.  I've spent a fair amount of time solving software problems in these sort of regulated environments, so now I am admittedly wired to consider such things even when they're not being mandated by a regulatory body.  My build system involves Bamboo and <a href="http://www.ansible.com/">Ansible</a>.  Out of this system a singular artifact of the application is produced for deployment. It's a clean system and I can pull the artifact down from the CI server at any point and work with the exact distribution that will hit my application server at any time. Well, identical so long as the cache is not built. Here lies my beef with the way Symfony works.</p>
<p>As I mentioned, this has been a bit of a pain with Assetic.  Until recently I was able to avoid it for the most part. Assetic can be a great tool, especially during development, but much of it can be circumvented with more front end centric tools like Grunt. Recently though I started playing around with the <a href="https://github.com/Spea/SpBowerBundle">SpBowerBundle</a> to manage front end assets and hit this problem again.  In principle I really like what SpBowerBundle brings to the table.  It's an awesome union of front end and back end dependency management into a nice clean integrated system.  However, this time I just couldn't make it work.  This is no fault of the Bundle's, as I eluded to earlier, I consider this a flaw in the way the container is compiled.</p>
<p>In general I am a huge fan of Symfony 2. I love the design and architecture of the system, and the flexibility to build a truly componetized app is unique in the PHP-stratosphere right now. This doesn't seem to me like it should be an issue, yet it is. It also seems to me like more people should be wrestling with this, but I'm not finding the blog articles on it or any workarounds for that matter.  Truthfully I suspect the problem could be resolved by delegating the string replacement of <em>%kernel.root_dir%</em> to a method call, like <em>getRootDir()</em> which could then return the magic constant <em>__DIR__</em> and we could use absolutely paths without having to hardcode them.</p>
</description>
        <pubDate>Sun Apr 13 2014 17:19:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2014/04/13/symfony-and-absolute-paths/</link>
        <guid isPermaLink="true">https://stanlemon.com/2014/04/13/symfony-and-absolute-paths/</guid>
        
      </item>
    
      <item>
        <title>SwS: The Basics</title>
        <description><p>Do you want to get started shaving with a double edge razor? Mark and I cover <a href="http://shavewithswagger.wordpress.com/2014/03/19/the-basics/">The Basics</a> on <em>Shave with Swagger</em>.</p>
</description>
        <pubDate>Wed Mar 19 2014 22:06:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2014/03/19/sws-the-basics/</link>
        <guid isPermaLink="true">https://stanlemon.com/2014/03/19/sws-the-basics/</guid>
        
      </item>
    
      <item>
        <title>SwS: I hated shaving</title>
        <description><p>Today's post on <a href="http://shavewithswagger.wordpress.com"><em>Shave with Swagger</em></a> discusses why <a href="http://shavewithswagger.wordpress.com/2014/03/17/i-hated-shaving/">I hated shaving</a>.  Keep an eye out, later this week Mark and I will cover &quot;the basics&quot; of what you need to get started wet shaving.</p>
</description>
        <pubDate>Mon Mar 17 2014 22:50:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2014/03/17/sws-i-hated-shaving/</link>
        <guid isPermaLink="true">https://stanlemon.com/2014/03/17/sws-i-hated-shaving/</guid>
        
      </item>
    
      <item>
        <title>Against Setter Injection</title>
        <description><p>I recently read Richard Miller's post  <a href="http://richardmiller.co.uk/2014/03/12/avoiding-setter-injection/">Avoiding Setter Injection</a> and I in large part agree with his sentiments. My conversion to constructor injection over setter injection is a fairly recent one and when I was initially deliberating the differences I found a lot of explanations online with little concrete code to show why this practice is less productive to good object oriented design. I thought I would try to illustrate with some concrete code examples I agree with Miller that ultimately constructor injection is a more worthy approach and why you should avoid using setter injection whenever possible.</p>
<p>First, let's consider two interfaces <em>FooService</em> and <em>FooNotifier. FooService</em> will use a <em>FooNotifier</em> which contains a method <em>notify().</em> We have two implementations of <em>FooNotifier</em> the <em>BarNotifier</em> and the <em>BazNotifier.</em>  Fundamentally they do two completely different things, though they agree to the same contract.  Here's what these things look like:</p>
<p>[gist]https://gist.github.com/stanlemon/d0748c96775995275074[/gist]</p>
<p>Now let's take a look at our constructor injection implementation <em>FooServiceConstruct</em>:</p>
<p>[gist]https://gist.github.com/stanlemon/a1968eedabb808fa5985[/gist]</p>
<p>And also our setter injection implementation <em>FooServiceSetter</em>:</p>
<p>[gist]https://gist.github.com/stanlemon/4ca097db323de8c7faba[/gist]</p>
<p>The argument goes that with constructor injection you create an object with all of it's dependencies. This means that you minimize side effects caused by the dependency not being injected, or worse changing on you after your object has been created. It makes your object fundamentally more predictable. Think of it this way, this is the only way that we can use our <em>FooServiceConstruct</em>:</p>
<p>[gist]https://gist.github.com/stanlemon/f2cf4b13562fa1fa3f74[/gist]</p>
<p>But with _FooServiceSetter w_e can actually do a couple of things with that implementation...</p>
<p>[gist]https://gist.github.com/stanlemon/bcd6e243a4baa5d7b0f5[/gist]</p>
<p>You'll see that we can create a <em>FooService</em> that either does not work or that can have it's internal behavior completely changed out from under us.  Neither of these options is good. The alternative is that with constructor injection we have an object that stands on it's own, the functionality of which cannot be changed in runtime after it has been instantiated. If you want to avoid buggy software, make your objects predictable.</p>
<p>This is a simple example, but it illustrates the nature of an object that uses setter injection. It creates the potential for volatility in your object that you don't want to occur.  Now I'm not saying you should never inject via setter. There may be times that you actually want the behavior I've illustrated, however I think you will find that most of the time you simply don't want that. Subsequently as a general rule I inject by constructor unless compelled otherwise during the design of my software. I make it the exception, not the rule when writing objects.</p>
</description>
        <pubDate>Sat Mar 15 2014 13:25:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2014/03/15/against-setter-injection/</link>
        <guid isPermaLink="true">https://stanlemon.com/2014/03/15/against-setter-injection/</guid>
        
      </item>
    
      <item>
        <title>Shave with Swagger</title>
        <description><p>I'm really excited to share a new blogging endeavor with my friend Mark Buetow, <em>Shave with Swagger</em> and <a href="http://shavewithswagger.wordpress.com/2014/03/12/good-morning/">Good morning!</a> is our first post.  What should you expect in the future? Posts about shaving, product reviews, blade analysis and random pontifications about our honest devotion to the pleasurable indulgence of a decent wet shave in the morning.</p>
</description>
        <pubDate>Thu Mar 13 2014 21:44:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2014/03/13/shave-with-swagger/</link>
        <guid isPermaLink="true">https://stanlemon.com/2014/03/13/shave-with-swagger/</guid>
        
      </item>
    
      <item>
        <title>Bamboo Push Notifications</title>
        <description><p>For awhile now I've wished that <a href="http://atlassian.com/software/bamboo">Bamboo</a> had an app, or something that could deliver a push notification when a build starts or finishes. Sure there is email, but that means my build notifications will get lost in all of the other junk I am quietly ignoring in my inbox.  What I want is a targeted notification for my builds. So I got to thinking, why not leverage <a href="http://pushover.net">Pushover</a>?</p>
<p>I decided to setup some inline script tasks on one of my bamboo plans using the following code (supply your credentials accordingly), in order to give Bamboo push notifications.</p>
<p>https://gist.github.com/stanlemon/8726494</p>
<p>Of course you can kick this up a notch by changing the message, using additional variables and throwing other notifications in at very stages of your build plans.</p>
</description>
        <pubDate>Fri Jan 31 2014 04:20:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2014/01/30/bamboo-push-notifications/</link>
        <guid isPermaLink="true">https://stanlemon.com/2014/01/30/bamboo-push-notifications/</guid>
        
      </item>
    
      <item>
        <title>Composer, Bamboo and private Bitbucket packages</title>
        <description><p>I use Atlassian's <a href="http://www.atlassian.com/software/bamboo">Bamboo</a> for continuous integration on a lot of projects. I'm a huge fan, it's a solid product with a lot of flexibility and the OnDemand service coupled with EC2 instances and custom EBS volume make for a really robust cloud based solution to continuous integration. Almost every project I put into Bamboo involves a call to load <a href="https://getcomposer.org">composer</a> and install dependencies. Many of the projects I dabble with belong to other people and so they're locked down with some form of authentication and not normally in <a href="http://packagist.org">Packagist</a>. In the past this has created some challenges with installing my composer dependencies, but this past weekend I think I finally found a tolerable solution to my dilemma.</p>
<p>In addition to being a big fan of Atlassian's Bamboo I also really like Atlassian <a href="http://bitbucket.org">Bitbucket</a>. I became a heavy Bitbucket user back before Atlassian bought the product because I was a heavy Mercurial user and it was the only hosted solution available. When they were bought and added <em>git</em> I kept using them because they offer <strong>free</strong> private repositories, whereas competitor GitHub does not. I've had problems when I develop a private package and then want to use it in an application. My workaround up until this weekend was to create a &quot;deployment&quot; user and give them access to my private repository, finally including it's username/password on my vas url in the repository block of my composer.json. This is all sorts of ugly and I have never been satisfied with it. In addition to not being safe or secure it also chews up one of the sacred five users you can team up with on a private repository.</p>
<p>So this weekend I set out to find a different approach to private Bitbucket packages in composer. One that wasn't so ugly and didn't make me feel so insecure about my setup.</p>
<p>BitBucket (and GitHub for that matter) have this concept of a deployment key. It's a private/public ssh key combination that grants read-only access to your repository without chewing up a user account to do so.  It's specifically geared toward the problem I was trying to solve. In my case Bamboo executes it's tasks as the 'bamboo' user.  The trick is getting the private portion of your deployment key into a place that Bamboo can use it.  Bamboo OnDemand creates EC2 instances when it needs to run a build and then terminates it after its done.  This is great because it keeps costs low and it means you don't have to worry about a machine getting gunked up with stuff between builds. It also means there's no shared state between runs, so sticking a private key on your EC2 instance only helps you for a little while.  But wait a minute... what if I set that up with a task in my job when it runs?</p>
<p>I wound up creating an initial task to setup my private deployment key like this:</p>
<p>[gist]https://gist.github.com/stanlemon/8661196[/gist]</p>
<p>Fortunately Bamboo lets you lock down your user's ability to see these sort of things and the logs don't show anything indicating what's going on, which makes it relatively secure - at least seemingly more so than sticking a plain text password in my composer.json file.</p>
<p>Now if you're familiar with Bamboo at all you know that the initial repository setup does not allow you to clone using ssh. This is limited only to the Java implementation of git that Bamboo uses to poll the repository. The default EC2 images ship with a full first class git, and so that means if you declare your package in the repositories block like &quot;<em>git@bitbucket.org:team/project.git</em>&quot; it'll use the aforementioned key and load just fine.</p>
<p>Life is a lot easier with an on-premise install of Bamboo where your disk persists between builds and you can set that key up permanently, but for those of us living in the cloud this will do the trick. You can use this approach on-premise too though and you can even use it with Jenkins if that's your preferred continuous integration implementation.</p>
</description>
        <pubDate>Tue Jan 28 2014 02:28:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2014/01/27/composer-bamboo-and-private-bitbucket-packages/</link>
        <guid isPermaLink="true">https://stanlemon.com/2014/01/27/composer-bamboo-and-private-bitbucket-packages/</guid>
        
      </item>
    
      <item>
        <title>Why I left Facebook</title>
        <description><p>On Thursday, December 20th I decided to deactivate my Facebook account. In full disclosure I am not committed to leaving it deactivated forever. I made this move against the recommendation of my wife and closest friends. Nonetheless I have committed to being Facebook-free for the remainder of 2013.</p>
<p>The question remains, why? Rather then let acquaintances, connections and dare I say “friends” (all supposed 918 of you) speculate I figured it would be best to set the record straight.</p>
<p>I was an early adopter of Facebook, having jumped on the bandwagon in 2005 while I was still studying at school. At the time the appeal for me was to connect with my high school friends, none of which were going to the same school I was. My Junior year of High School morphed into my Senior year and I got out of West Chicago Community High School in three years instead of the normal four. This meant that the group of individuals I had grown up with I was no longer graduating with. Facebook helped me stay connected with some of those people I grew up with and also find out what I had missed my would-be senior year.</p>
<p>I didn’t get heavily involved in posting until 2009 when my daughter Lucy was born. The months leading up to her entrance in the world were filled with posts and pictures of me and my baby-momma packing the pounds and preparing for our daughter’s big appearance. By that point my Facebook friends had expanded to include church friends, neighbors, colleagues from work and college friends as well. So Facebook became a great way to share with them what was going on as a young couple with a growing family.</p>
<p>Fast forward to 2013, eight years after I first setup my account and here I am deactivating it for the first time ever. I’ve longer surpassed Dunbar’s number with regards to my friend count and it’s always been on my mind that many of these connections simply don’t matter. But some of them do. Some of them matter a lot.</p>
<p>I have tried in larger part to resist the urge to discuss politics on Facebook. If you’ve met me in person you know that I am more than willing to share my positions and defend them, and have a reasonable conversation about them. For the most part, I don’t do that on Facebook. Likewise, religion is another topic I do my best to steer away from. This area I have been more gray with though, especially as of late. Please don’t misunderstand me, I have expressed my faith and frequently share things from the Higher Things website. But you won’t find me sharing my beliefs on what I consider to be polarizing social topics. It’s not that I don’t have those beliefs, I do - and as my closest friends will tell you I’m pretty passionate about them too. (Systematic and liturgical theology, the things that most of the world doesn't care about are another story - those I've largely considered fair game for better or worse.)</p>
<p>I consider it a matter of pride that what you get when you talk to me is the same whether it be by text, email, phone or in person. I try very hard to maintain the same level of sarcasm and crassness whether in person or by email. I outright refuse to take myself too seriously on any of these mediums either. This is not a standard I believe to be common though, and I think these medium allow many to hide behind their keyboard and says things in ways they simply would never do in person.</p>
<p>People are very much entitled to their opinions. They are equally entitled to post them on Facebook (or Twitter or the flavor of the day). I’m not getting off Facebook because I don’t want people to speak what they believe or think. If you need to, please read that sentence one more time. I’m getting off of Facebook because I still want to have dinner with you. It dawned on me this week as I watched close friends and immediate family openly criticize my faith in an offensive and personal fashion. I think they thought it was cute, perhaps even comical. I think stupidity prevailed over judgment and they didn’t think it was nearly as awful as it was. Here’s the thing that got me though, none of the people who circulated the meme in question would dare say such things at the Christmas dinner table. They just wouldn’t. It’s in large part because they are decent and kind individuals who love me as much as I love them. Yet on Facebook for whatever reason they seem compelled to cross that line boldly. I’m sure it’s in part because they have friends who are going to hit that “Like” button, or perhaps give them a “True dat!” in the comment feed. But I think they forget that I’m their friend too.</p>
<p>I really enjoy seeing pictures of friends and family. I love hearing about your trips and weekend travels. The recipes you share are not only delicious but inspiring. The posts you make that you’d never be willing to say to my face… those trouble me. They hurt. And I guess that’s ultimately what has driven me away from Facebook. My feelings have been hurt and it’s been done in the shadows of the dark alleys of my Facebook feed. I'm sure others feelings have been hurt to, maybe even by some who agreed with you on your last rant but find this just as offensive as I do.</p>
<p>Growing up my dad would often tell me that “every action has an equal and opposite reaction.” For much of my childhood I wrote this off as just another stanza in the long ballad of life. As an adult I realize there’s a lot of truth and wisdom in such a statement. I guess the reaction then to those friends I mentioned earlier is this… You don’t get to see pictures of my kids at Christmas. You’re not going to get to see the videos on my wall as they open the presents you sent. You’re going to miss next week’s sonogram. And when it comes to that Christmas Wossel recipe we were going to re-share, well you’re out of luck there too. It's pretty tasty by the way.</p>
<p>I don’t know if this is forever… I’ve got the unusual occasion to take time off at Christmas (for first time in four years) and I felt my time might be best spent focussing on my kids than on Facebook. I guess we’ll have to wait and see what’s in store for 2014.</p>
</description>
        <pubDate>Sun Dec 22 2013 18:20:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/12/22/why-i-left-facebook/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/12/22/why-i-left-facebook/</guid>
        
      </item>
    
      <item>
        <title>2-Factor This!</title>
        <description><p>A lot of services across the web are amping up security in lieu of <a href="http://abcnews.go.com/Technology/hacker-group-stole-million-stolen-facebook-google-passwords/story?id=21109910">recent breaches</a>. One technique to do this is called <a href="https://help.github.com/articles/about-two-factor-authentication">two factor authentication</a>. It’s a name that perfectly describes the technique, but explains absolutely nothing.</p>
<p>So what is two factor auth and why do you care? Simply, two factor auth is your password plus something else. In most cases that “something else” is going to be a text message, an email or a secure token system like <a href="https://itunes.apple.com/us/app/google-authenticator/id388497605">Google Authenticator</a> or <a href="https://www.authy.com">Authy</a>. Some banking websites have been doing this forever via email but the growing trend is to use text messages as they can be a considerably safer approach to this sort of authentication.</p>
<p>Here’s the thing to keep in mind… You are most likely already doing two factor auth in your life - you just don’t think of it like that. If you have a safety deposit box for example, it takes two keys to unlock it. Without both sets your birth certificate isn’t going to see the light of day. If you’ve bought a car recently you’re also using two factor auth as <a href="http://en.wikipedia.org/wiki/Transponder_car_key">every car key these days comes with a microchip implemented in it</a>. You can’t start your car with a copy of your key, you need to use the key plus the microchip if you want to drive anywhere. And if you don’t have that microchip your car not only won’t run, it very well may lock up on you too! These are two factor strategies, where they prevent criminal-like-folk from copying your keys and running away with your identity and precious automobile. <em>Why not use that same strategy with your personal information stored securely on the world wide web?</em></p>
<p>How does two factor work with your favorite web service? There are two typical routes, the most common of which involves your cell phone and a text messaging plan. If you don’t have unlimited text messaging either pony up or take a trip to the Verizon store for an upgrade. When you login, normally for the first time, you’ll get a text message from the service in question. Websites like Facebook will ask you to punch in a unique code on this text message after you enter your password, but before you actually get to login to the service. The idea is that your cell phone is most likely on you and there’s a uniqueness to the device in your pocket that a hacker cannot replicate. Stealing your password then is not enough, you need to steal a person’s cell phone too - thus making it infinitely more difficult for a hacker to access your information.</p>
<p>Not every service has two factor authentication, but a lot do. You should evaluate the services you use every day and consider enabling two factor authentication where it’s available. I’m a big proponent of enabling two factor auth for your <a href="http://www.google.com/landing/2step/">Google</a>, <a href="https://www.dropbox.com/help/363/en">Dropbox</a>, <a href="http://blog.evernote.com/blog/2013/10/04/two-step-verification-available-to-all-users/">Evernote</a> and <a href="https://www.facebook.com/note.php?note_id=10150172618258920">Facebook</a> accounts. As these items likely contain more personal data about you and your friends than anything else you’re using it’s important to harden your security around them.</p>
<p>Don’t get me wrong… Two factor auth doesn’t just slow down the losers trying to compromise your data, it slows you down too. Principally though this should only happen when you setup Facebook on your phone, or configure your email client to pull down your Gmail. Your setup is slower, but your data is safer. In my opinion this is a fair trade considering what is at stake. One other thing to keep in mind… <strong>These services don’t do two factor auth for their sake.</strong> It actually costs them money to run, with almost no return on the investment! Two factor auth is a service for you, to protect your data and keep you, your family and friends safe.</p>
</description>
        <pubDate>Tue Dec 10 2013 02:57:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/12/09/2-factor-this/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/12/09/2-factor-this/</guid>
        
      </item>
    
      <item>
        <title>You don't give a crap, but your mom does!</title>
        <description><p><em>So you don’t give a crap that your data gets exposed or hacked?</em> You don’t have anything to hide, so the potential leak isn’t worth the added effort of complex passwords and password management systems.  You want a simple, easy to remember password.  Fair enough.  I get it.  You don’t give a crap, but here’s the thing… <strong>Your mom might.</strong> Or your dad, or your sister or your great Aunt Bertha or your Cousin’s best friend that you just recently added on Facebook.  <em>And that’s the point</em>!</p>
<p>Let’s say you’re one of the few who don’t give a rip because you have nothing to hide. Stop being selfish!  Most of this password protection junk has nothing to do with you.  It has to do with the information you have access to, like my email address, my phone number, the names of my kids and that picture I shared with you from my best friends bachelor party!</p>
<p>You are most likely passively collecting information in the services you use every day.  It might just be people's names, but it also could be more serious information like their addresses and phone numbers.  A data leak because you used a stupid password exposes all kinds of things that your friends and family don’t want everyone under the sun to know. And not just because it’s private information, but because it effects their safety!</p>
<p>It can get worse then just the revealing of address and phone numbers though.  How you say?  Consider the fact that that Facebook app on your phone posts where you go.  Maybe it’s a restaurant, church or even the grocery store.  You’re a hip social media rock star and you’ve been capturing your geo-coordinates and checking in wherever you go.  So have I, your mutual friend on Facebook,  as well as your neighbor’s 16 year old daughter.  Now ALL of that information about where you’ve been and the trends of your daily activity is accessible to some low life hacker that cracked your stupid-simple password.  Is this sounding scary yet?  Let’s keep going…  That hacker might decide to pay one of us (you, me or or your neighbor’s teenage daughter) a visit.  Or maybe the hacker sells that valuable data information to a petty thief or a pedophile. Now is it scary? <em>It ought to be</em>.  <strong>This is what happens when the flood gate known as your weakly protected account is opened.</strong></p>
<p>You are just a gateway drug for a hacker. Your credit card, social security number are low hanging fruit compared to the peripheral data you are toting in those web based accounts you login day in and day out. Protecting your accounts with unique and complex passwords isn’t just about you.  It’s about everyone you engage with using those services.  It’s about personal protection, for you, your family and your friends. So I get it, you don’t have anything to hide that you’re worried about a hacker exposing. But I do.</p>
</description>
        <pubDate>Sat Dec 07 2013 14:32:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/12/07/you-dont-give-a-crap-but-your-mom-does/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/12/07/you-dont-give-a-crap-but-your-mom-does/</guid>
        
      </item>
    
      <item>
        <title>How Google is making Gmail Insecure</title>
        <description><p><a href="http://googleblog.blogspot.ca/2012/12/winter-cleaning.html">Last winter, about a year ago, Google did a round of house cleaning</a>.  When they did this they consequently opened the flood gates to making Gmail a less secure product.  <em>How you say</em>?  Let me explain...</p>
<p>Google's 12/12 cleaning eliminated a product called Google Sync.  This was an extremely handy product for folks going mobile who want to stay connected to their email.  It essentially allowed you to setup your Gmail account using Microsoft's Exchange protocol.  What's significant about that is that it enabled instant push notifications for new email messages.  This meant that when Google got an email for you, if you were using the Exchange protocol you got it instantly. When Google dropped support for this the best you could hope for was getting your email in a 15 minute window, hardly instant.</p>
<p>In a world of <strong>instant</strong> not having your email as soon as it's available is a huge deal.  But why did Google do this?  Presumably to get more people to adopt their <a href="https://itunes.apple.com/app/gmail/id422689480">Gmail iOS app</a>. But here's the thing... Gmail for iOS <em><strong>SUCKS</strong></em>!  Yeah, I said it, it's absolutely terrible!  Not all of it is Google's fault, but some of it should have been resolved when Google picked up <a href="http://sparrowmailapp.com/">Sparrow</a> in an acquisition - those dudes knew how to make an email account.  Gmail for iOS is awful first and foremost because iOS has no concept of a default email client.  If you're using Safari and you click on an email address, or maybe you click on it from your Contacts, you're going to open up the native Mail app. There are more problematic issues though that are technical in nature, like Gmail's inability to properly handle responsive email layouts. When email doesn't look right people don't want to use your product. This is where everything goes bad...</p>
<p>Your email looks like crap and nothing on your mobile device uses the right client.  So what do you do?  You start experimenting with other clients. This is fundamentally how Google is destroying the security of Gmail.  Since the shut down of Google Sync for the masses you've seen a whole host of iOS email clients spring up.  I'm looking at you <a href="http://www.mailboxapp.com/">Mailbox</a>, <a href="http://evomail.io/">Evomail</a>, <a href="http://www.getboxer.com/">Boxer</a> and friends. Personally I don't have a beef with these products in and of themselves, but the problem is they all offer you push notifications <strong>at a cost</strong>.  Not a financial cost, a risky security cost. In order for these applications to tell you the instant you get your email you have to give them <strong>full and absolute access to your inbox</strong>.  Then you have to trust that <a href="https://lastpass.com/adobe/">no one at that company is stupid enough to become the next Adobe.</a> I actually like some of the products I just mentioned, but I don't use them.  The reason is simple, I'm not comfortable letting someone else comb my email every single day. Quite frankly, you shouldn't be either!</p>
<p>What's the answer?  For me it's two fold...  Important email accounts use the Gmail iOS app.  Non-important email accounts stay in the native Mail app.  The important ones are there too, so that the rest of my iOS experience doesn't stink, but I have notifications and badges turned off for those accounts. It's not a pretty solution in my opinion, but it's the only solution that keeps your email safe.  Your email needs to be safe too.  There is no easier way for a hacker to gain access to everything else in your life than getting access to your email.  Most services allow you to reset everything under the sun using just your email address.  Keep your email safe!</p>
<p>Both Google and Apple can help us out too, though I don't think either of them are going to do so.  Google can fix their technical problems.  Most of them should just not happen, it's inexcusable.  They can also work on making Gmail act more like an iOS app and less like a red-headed-Android app.  Meanwhile Apple can give us the ability to select a default email app, and they can also build out APIs to allow apps like Mailbox to poll an IMAP service like Gmail in the background of the device.  Yes, it's going to hurt your battery life but that's a price I'm willing to pay for security. I just wouldn't expect Apple to do that anytime soon...</p>
<p>There's one other option I haven't mentioned...  Ditch Gmail altogether.  If Google is content to encourage users to risk their email security then maybe it's time to look elsewhere?  Any Exchange based service will work, and quite honestly the dudes over at Microsoft have built a solid product with <a href="http://outlook.com">Outlook.com</a>.  If that doesn't float your boat, <a href="http://mail.yahoo.com">Yahoo Mail</a> also has a solid email solution.  And guess what... you can get push notifications for both!</p>
<p><em>Someone may be quick to point out that Apple's own iCloud solution does push too.  This is true, but anyone who has used iCloud knows, the spam filtering and phishing protection makes it nearly the worst solution to email available on the internet today.</em></p>
</description>
        <pubDate>Fri Dec 06 2013 11:23:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/12/06/why-google-is-making-gmail-insecure/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/12/06/why-google-is-making-gmail-insecure/</guid>
        
      </item>
    
      <item>
        <title>The DataMapper Ruse</title>
        <description><p>There were some great articles today about ORMs, specifically &quot;<a href="http://programmingarehard.com/2013/10/21/is-orm-abstraction-a-pipe-dream.html">Is ORM abstraction a pipe dream?</a>&quot; by David Adam and then &quot;<a href="http://paul-m-jones.com/archives/4757">Publish Your Failure; or, The Way Of All Frameworks</a>&quot; by Paul Jones (the man who led me to good BBQ in Memphis).</p>
<p>I've been thinking about ORMs a lot lately and I've been wanting to write something about what I consider to be the DataMapper farce. I should be clear up front, I'm big Doctrine 2 fan.  <strong>BIG.</strong> It's my ORM of choice every single time, or maybe it was... On principal I love Doctrine 2. My days as a Java developer made me grow fond of Hibernate and with time I've come to really appreciate object hydration via the DataMapper pattern alongside the Repository pattern.  What I've appreciated most is the fact that I can write a model with no implicit dependencies, meaning my class &quot;Foo&quot; does not extend <em>ActiveFoo</em> or <em>QueryFoo</em> or <em>BaseFoo</em> or <em>FooTable</em> or <em>GatewayFoo</em> or <em>FooPeer</em> or <em>MagicHotSauceFoo</em>, it simply stands on it's own.  In the case of Doctrine 2 my model usually gets some love from annotations or maybe Yaml if I'm looking to spice up my day.</p>
<p>Here's the thing I've been contemplating though and why I think this notion of portability is fundamentally a ruse (<em>for now</em>). In the PHP universe what other library provides a DataMapper implementation that would allow you to freely move from Doctrine 2? If I choose to write stand alone models I am either stuck doing some sort of hydration myself (<em>all kinds of time consuming icky</em>) or I am using Doctrine 2.  So this idea that ActiveRecord locks you in and Doctrine 2 doesn't, is, well simply not true...  Short of a viable alternative Doctrine 2 has a monopoly on the DataMapper pattern, making it as 'locked in' as using Propel or any other ActiveRecord-styled ORM.</p>
<p>Now don't get me wrong...  This doesn't change the fact that I will likely continue to gravitate toward's Doctrine 2.  I am going to hang tight and hope for some healthy competition that will allow me to write my models portable enough to swap in Doctrine 2 for odd days of the week and LibraryX for even days.</p>
</description>
        <pubDate>Tue Oct 29 2013 03:01:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/10/28/the-datamapper-ruse/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/10/28/the-datamapper-ruse/</guid>
        
      </item>
    
      <item>
        <title>A Slice of Bundle Please</title>
        <description><p>PHP has more frameworks then I have fingers and toes, and that diversity gives developers and architects alike a lot of choices when it comes to solving a problem. It can also be a total headache sifting through the options and making sense of what seems like chaos. As of late I've found myself using Symfony 2 to solve my problems and I am increasingly a fan of it's underlying architecture and the freedom it gives developers to work in slices or components of an application.</p>
<p>A fair amount of debate has hit the internet about the dependency model of certain Symfony 2 components. Some argue that component A with dependencies B and C is too much, or that because component A also requires dependencies D, E and F to run it's unit tests it's not a truly stand alone component and instead represent a &quot;coupled&quot; library or framework.  I actually think there is a lot of merit in these assessments, but I don't believe it discounts Symfony 2 from being my MVC framework of choice.  Nor do I think this somehow invalidates the fact that Symfony 2 stands distinctively different from the alternatives in the PHP community. Symfony 2 is a huge step forward from the land of tightly coupled frameworks (I'm looking at you Cake!).  More importantly than the dependency model though, I think Symfony 2 presents an architecture of &quot;Bundles&quot; that simply doesn't get enough love in the current framework debates.</p>
<p>A bundle in Symfony 2 is nothing more then a stand alone unit of code.  It may have dependencies, but it's stand alone in the sense that it represents a functional chunk of an application.  A well designed bundle could theoretically be deployed as distinct unit from an application.  Think about an application where you have an internal messaging system.  Wouldn't it be nice to be able to peel that message system out of the main app and to develop it independently?  When I say independently, I mean completely functioning on a web server without the rest of the application.  This is bundle development at its finest.</p>
<p>Don't get me wrong, lots of bundles are not developed this way.  I've seen applications where bundle divisions are completely arbitrary and others that had a nasty web of cross dependencies such that they should have just been in the same bundle.  There is a happy place however, where bundle development represents a unique sliver of a larger application, and that place is why I'm so drawn to Symfony 2.</p>
<p>I've been working on a reporting bundle for a little while now. It's a simple concept, take an arbitrary query and translate it into a table. When I am developing it locally I actually have it bootstrapped into a vanilla Symfony Standard edition created by composer.  When I am done with changes I deploy them into two different apps I've written that both use this bundle.  The apps themselves have very little knowledge of the bundle, just enough to put some links into their respective menus, import a routing configuration and that's about it. What's most important though is that the reporting bundle itself has no knowledge of the two apps, such that I can develop it independently and deploy it to both without disrupting anything.  The immediate benefits of this are rapid development and deployment, allowing for changes to trickle out to actual software faster.</p>
<p>This sort of development, application by slice or bundle, in a big team can optimize workflow by an order of magnitude.  You can have a team iterating independently at a rapid pace without disrupting the other teams.  In the end you have a forward moving application of independent and highly functional units. What's not to love about that?</p>
<p>Symfony 2's implementation is unique in my opinion because of things like extensions, compiler passes, bundle inheritance and the power of template inheritance. These aspects of Symfony 2 really empower unique slivers of code.  When done right it's completely possible to develop a bundle that doesn't even need Symfony 2.  Want to bootstrap a new framework and use your bundle?  You can do that - it just requires some deliberate planning at the onset (aka inject, inject, inject!).  Now some will read this an appeal to the awesomeness of Symfony’s dependency injection component and argue that’s really where the power of these slivers come into play.  I disagree, I think it’s a piece of the pie - but fundamentally there is an underlying architecture and set of principals that lends itself to lose coupling of pieces of an application.  What I wish though, is that this bundle mentality would materialize in some other frameworks!</p>
<p><em>** After writing this I was challenged with the notion of “plugins” or “modules” as they appear in some other frameworks.  In my opinion most of the “things” that use this terminology lack the looseness of a Symfony bundle. A well written Symfony 2 bundle can in my opinion be bootstrapped without using Symfony.  It requires writing Controllers that stand alone and are injected and it requires having a full grasp of your dependencies (no $this-&gt;createForm() please), but it can be done and the power of that independently deployable bundle is something that plugins and modules simply have not proven they can do just yet.</em></p>
</description>
        <pubDate>Thu Oct 24 2013 04:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/10/24/a-slice-of-bundle-please/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/10/24/a-slice-of-bundle-please/</guid>
        
      </item>
    
      <item>
        <title>Unlocked iPhone 5S</title>
        <description><p>When I went to order my wife a new phone I couldn't get a straight answer as to whether or not the T-Mobile full-price version would be unlocked or not. The general consensus was that the device would ship with a T-Mobile SIM and be bound to T-Mobile's prepaid service at least for a couple of months.  The whole thing was terribly confusing because you could order an iPhone 5C without a SIM in it at all, which is what I was hoping I could do with the 5S.</p>
<p>I pulled the trigger and ordered my wife an iPhone 5S from the Apple Store online, fully intending to cancel my largest bill, AT&amp;T and move on with the latest and greatest.  I value my freedom and at the core I'm cheap, so the long term savings and the short term monthly decrease was highly appealing to me.  I had pegged my eyes on StraightTalk, the details of which are destined for another post, and figured we would complete that transition in a few months.</p>
<p>I ordered the phone and it arrived with a T-Mobile SIM.  Now I've never done a prepaid plan before so I was a rookie at this in every sense of the word. I opened the box and I could not figure out how to get service started.  There was nothing in the box explaining what to do and when I called T-Mobile they basically told me I had invested in a precious paper weight and needed to take it into a store.  This was simply not the freedom that I coveted.</p>
<p>I happened to have a StraightTalk SIM laying around and after two T-Mobile customer support calls and three AppleCare calls I came to the determination that this device was most likely unlocked and I could kick T-Mobile to the can.</p>
<p>So here is the bottom line... <strong>If you are ordering an iPhone 5S, as best I can tell the device is in fact unlocked.</strong>  It's worth nothing that I was not transferring a number and I did not have any previous accounts with T-Mobile.  I was fed up and frustrated with the ridiculousness of their customer support and took a chance by sticking a StraightTalk SIM into the device - and it worked!  My advice if you want to dramatically cut a bill and sport a new iPhone 5S is to not get hung up on T-Mobile when you order as it would appear these devices are free to roam about carriers as deemed fit by their owner.</p>
</description>
        <pubDate>Tue Oct 22 2013 04:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/10/22/unlocked-iphone-5s/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/10/22/unlocked-iphone-5s/</guid>
        
      </item>
    
      <item>
        <title>Cut the Waste</title>
        <description><p>Back in February my family moved from Pittsburgh to Southern Indiana.  When we made the move we didn't actually know where we would end up. We put most of our worldly goods into storage and settled in with my in-laws for an extended stay while we shopped for a house.  Whenever we've moved in the past we go through a process of purging the stuff we don't use.  Trash bags get filled, car loads get taken to Good Will and we lighten the load for wherever it is we are moving to. This most recent move brought more purging then we've done in the past, by about an order of magnitude.  Our house in Pittsburgh had an unfinished basement that was perfect for storage, so we quickly consumed every square inch of space with junk.  When we moved most all of the basement's contents stayed in Pittsburgh one way or another.</p>
<p>When we finaly bought a house we settled for one without a basement or grandiose storage space. This caused us to yet again cut the waste from our lives. It's amazing how liberating it can be to become nimble by cutting the waste.</p>
<p>I tend to cycle through this same process with my office desk too.  Every couple of months I empty my drawers and weed through everything, restoring only the necessities and essentially cutting the waste.  On the other end of this process I can find things faster and I free up storage for new things far more important than the ones I get rid of.</p>
<p>Software development is no different.  Sometimes you need to sell the house.  Other times you just need to clean off the desk. In the end you need to cut the waste, trim the fat if you will. When I descend on a project one of the first questions I ask myself is, how can I remove as many lines of code as possible?  It seems like a silly question, but the truth is that clarity comes through simplicity.  Complex code often just needs to be gutted, whether through refactoring or rewriting. Understanding the initial problem is critical, but fundamentally cutting the waste creates a more nimble piece of software and this in turns translates to better results all around.  Don't believe me?  Pick a complex process and drop the gauntlet on it.  Try simplifying it and set a goal to reduce it's footprint by 20%. I'm willing to bet the fruits of this labor will be profitable.</p>
</description>
        <pubDate>Mon Sep 02 2013 02:04:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/09/01/cut-the-waste/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/09/01/cut-the-waste/</guid>
        
      </item>
    
      <item>
        <title>Project Based Interviews</title>
        <description><p>I recently read, &quot;<a href="https://medium.com/lessons-learned/80ba19c55883">I will not do your tech interview.</a>&quot; by Ike Ellis and it got me to thinking about the interviews I have been in, both as an interviewer and an interviewee.</p>
<p>The article resonated with me initially as I thought about an in-person panel interview I once sat through.  The interview consisted mostly of brain teasers and had very little technical substance to it.  For example, I was asked &quot;If you had to determine how many cars were in the world how would do it?&quot; Still to this day I think this is one of the dumbest questions I have ever been asked in an interview. My initial response was that I would google it.  This only upset the interviewer because the whole purpose, in their opinion, of the question was to see how worked through problems. My appeal to them was that it was a question I would never encounter while working for them. The question was out of my wheel house as I knew very little about information measurement and market research gathering.  The interview reached it's pinnacle when I was asked the infamous &quot;<a href="http://www.glassdoor.com/Interview/Suppose-you-had-eight-identical-balls-One-of-them-is-slightly-heavier-and-you-are-given-a-balance-scale-What-s-the-fewes-QTN_10521.htm">Eight Balls</a>&quot; question that is most notable for its use by Goldman Sachs when conducting interviews.  Needless to say I left that interview and called the recruiter to tell them I was no longer interested in the position.  I have no idea if they would have offered it to me, but the bottom line was that they had devalued their company during the interview and I no longer had a desire or interest to work with them.</p>
<p>So Ellis article earlier noted then got me to thinking about the other side of the table and what I have done when I've been responsible for interviewing potential candidates. When I first started conducting interviews for development positions I compiled a list of questions that I felt assessed  core technology to our product.  They weren't product specific and quite frankly they were pretty simple. One question involved two pieces of paper with tabular data on them.  The first question was about creating a relationship between table A and table B, with me ultimately looking for them to create a mapping table.  The second question was to write a SQL query that joined the data together in a single result set.  Answers were coded on a dry erase board, the least practical environment for any developer to write code.</p>
<p>I was once asked by a supervisor why I valued questions like the above and at first I replied, &quot;Do you really want to work with someone that can't write a simple SQL query?&quot; In hind sight turning the question back on him fundamentally missed the goal I was trying to accomplish.  I was charged with finding the <strong>best</strong> talent available for our company and rather then defend the process on it's merits I surrendered to the question.  The root of my problem came in evaluating or understanding what &quot;best&quot; meant for our company.  I simply didn't know what we valued in developers and that lack of understanding created a flawed interview process.</p>
<p>I don't believe that &quot;best&quot; is the same in Company A as it is in Company B or that when Company C is hiring for position R it's the same as when they are hiring for position S.  That needs to be said because it's too easy to simplify the solution to &quot;best&quot; as hiring the most knowledgable Senior Developer in the given talent pool.</p>
<p>Over time my questions proved to me that there aren't nearly as many senior developers around as management wanted to hire. So how do you fill gaps in technical leadership on a team?  When you can't hire them, you make them (this assumes company buy-in on this philosophy). This in turn shifted my thought process from my quiz style assessment to a project style assessment.  Perhaps I have my work with <a href="http://www.projectfoundry.org">Project Foundry</a> to thank for this revelation, but the bottom line is that I reached a point where I felt like I would gain better assessment data by looking at practical project based work instead of the results of a quiz.</p>
<p>My project based interview process involved a specification, poorly written like many of the ones I encountered at the time (this was deliberate), and some starting code to work from.  My unrealized dream for this process was to couple it with a <a href="http://bitbucket.org">BitBucket</a> repository so I could witness the progression of work through commit history.  Eventually I also wanted to have deployment to <a href="http://openshift.com">OpenShfit</a> for a working product because that's ultimately what developers do - they deploy the code they write. Here's the bottom line, with this process I hired three individuals.  They all had different solutions to the problem and they were able to work on the problem without me hovering over them through the project.  One guy was  a Junior Developer who far exceeded the expectations set for him in the project and that turned out to be trend in his career thereafter.  Another one of the other guys quickly moved up to a managerial role mentoring the younger developers on the team. His in person interview was memorable because of the awesome answers he gave when I asked him about his design decisions on the project.  He knew his stuff and the project had established that, so his interview turned into a friendly chat about coding like you might find on a Friday at 4 when the cases of beer were being opened at the dev shop.  The remaining developer remained a core code producer on the team up until the time I left that position. I considered all three of them victories for the new process.</p>
<p>I do believe that skill assessment for developers is necessary. I do disagree with the way we conduct those assessments. When I took the position I described earlier I had a timed online quiz that I needed to pass to be offered a job. I didn't and still don't see any value in that form of assessment. Those quizzes eliminate the ability for feedback loops and they dumb down computer science to multiple choice, which simply doesn't happen on real projects.  My code questions involving a dry erase board for writing code also jeopardize a hiring managers ability to get good talent.  Most developers simply don't code in front of other people and even fewer are confined by time in the way that we run these interviews.  Our developers work on projects, either a spec or a ticket and that's where they are forced to be problem solvers and artisans.  If we want to see how they will succeed in our companies we should give them realistic scenarios to demonstrate success.</p>
<p>Coming full circle we're back to the question of &quot;brain teasers&quot;.  What value do they hold?  <a href="http://www.theatlantic.com/business/archive/2013/06/google-finally-admits-that-its-infamous-brainteasers-were-completely-useless-for-hiring/277053/">It sounds like even Google, once notorious for these, has given up on using them.</a>  I have to confess I don't usually excel at these challenges.  Sometimes I downright freeze as I struggle to comprehend what it is my interviewer wants to see me do. <em>It's like I'm trying to defuse a bomb that needs four gallons of water and all I have is a three gallon and a five gallon gas can to do it with</em> (<a href="http://www.imdb.com/title/tt0112864/">Die Hard 3</a>).  I wonder if It might be helpful if we look at other industries and take a page from their book.  For example, how do Plumbers interview?  It starts with verifying that they have a license which is then bound concrete hours doing specific work.  Furthermore these positions have a license with it's own set of project-oriented assessment that is renewed and re-evaluated.  What about nurses?  They too are evaluated based upon on-the-ground experience doing actual nurse-work. There are verifications and accreditations based upon working experience that come into play. How do you decide to hire a contractor to work on your house?  You look at his past work, the projects he's completed and you use the referrals of that work to come to a conclusion about whether or not he can be successful on your project.  You don't ask a Plumber for an algorithm he'll never implement, you ask him to fix a toilet - which quite frankly just makes a whole lot more sense.</p>
<p>Things are getting easier for those interviewing developers.  Thanks to tools like <a href="http://github.com">GitHub</a> and <a href="http://bitbucket.org">BitBucket</a> you can actually see things that developers are working on.  You can also see a progression of their thought process in code commit history, a highly valuable tool for assessment in my opinion. After all, how much of what we do boils down to refactoring existing work? How better to see that skill then to run <em>git log</em>? Combine those tools with <a href="http://c9.io">Cloud 9</a>, <a href="http://openshift.com">OpenShift</a> and even <a href="http://aws.amazon.com">AWS</a> and you have really easy ways to setup environments and projects that produce hearty evaluation data for potential candidates.  Data that corresponds to actual projects and projects that mirror what they're actually going to be doing for you in their role.  Lastly, a project-oriented interview process is more appealing to me as a developer too.  Technology jobs are plenty but technology workers are limited.  This means that as much as I need to sell myself as a product to you, you need to sell your company as a product to me.  Your first exposure is through your interview process, so why not make it something that excites me as a developer to come and be a part of your team?</p>
</description>
        <pubDate>Sat Aug 24 2013 15:13:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/08/24/project-based-interviews/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/08/24/project-based-interviews/</guid>
        
      </item>
    
      <item>
        <title>Getting started with puppet</title>
        <description><p>I am a firm believer in <a href="http://puppetlabs.com">Puppet</a>.  I can't imagine provisioning a network of environments without it.  Getting started with Puppet is a mixed bag though, and finding a simple all in one for a master and client setup can be tough.  <a href="http://vagrantup.com">Vagrant</a> makes setting this up easy though, you can get a master and couple of clients up and running in no time all on virtual infrastructure.  Here is a Vagrantfile I wrote to get a couple of CentOS base boxes dancing together using puppet:</p>
<p>https://gist.github.com/stanlemon/5649465</p>
</description>
        <pubDate>Sat May 25 2013 15:34:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/05/25/getting-started-with-puppet/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/05/25/getting-started-with-puppet/</guid>
        
      </item>
    
      <item>
        <title>Symfony\ICU and CentOS</title>
        <description><p>I use CentOS for most of my development environments and I also use it in a number of production scenarios as well.  Where I don't use it I am most likely running something else RHEL based, like Amazon Linux over on AWS.  All of these distributions use an older version of the ICU library, 4.2 to be specific. Symfony has a component called ICU, which has a check for 4.4 or greater.  In my situation I don't need ICU, I just need composer to install it so I can move on with development. Running composer.phar install on the <a href="https://github.com/symfony/symfony-standard">symfony-standard</a> caused me problems with lib-ICU compatibility.  <em>So what to do?</em></p>
<p>Well, <a href="https://github.com/symfony/symfony/pull/7386">this Pull Request</a> provided me with a lot of helpful information in figuring out what to do.  The solution I went with was to change my composer.json and added this to it:</p>
<blockquote>
<p>&quot;symfony/icu&quot;: &quot;1.0.*@dev&quot;,</p>
</blockquote>
<p>This will use an older version of the ICU library that doesn't necessitate an updated lib-ICU.  It's less then ideal, but it'll get composer.phar to install the standard edition packages so you can get to work.</p>
</description>
        <pubDate>Fri May 24 2013 09:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/05/24/symfonyicu-and-centos/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/05/24/symfonyicu-and-centos/</guid>
        
      </item>
    
      <item>
        <title>s3cmd and GovCloud</title>
        <description><p>If you're using <a href="http://s3tools.org/"><em>s3cmd</em></a> to put files into an s3 bucket and need to do so into <a href="http://aws.amazon.com/govcloud-us/">GovCloud</a> you can, but you need to override the end point URL's used for s3.  I had a hard time finding documentation for this, so hopefully this saves someone sometime in the future.</p>
<p><em>s3cmd</em> writes a configuration file, likely at ~/.s3cfg and in it are two options that you are not prompted for when going through the setup process, but are relevant when connecting to GovCloud.  Specifically 'host_base' and 'host_bucket' need to be changed from the default s3 end points, they need to be set like so:</p>
<blockquote>
<p>host_base = s3-us-gov-west-1.amazonaws.com<br>
host_bucket = %(bucket)s.s3-us-gov-west-1.amazonaws.com</p>
</blockquote>
<p>Once these are set your GovCloud access key and secret should work.</p>
</description>
        <pubDate>Thu May 23 2013 09:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/05/23/s3cmd-and-govcloud/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/05/23/s3cmd-and-govcloud/</guid>
        
      </item>
    
      <item>
        <title>The Demise of Posterous</title>
        <description><p>I have written elsewhere about my frustrations over the demise of Posterous. It's now three days away and I have received yet another email reminding me to get my content off their site. Fortunately this time Posterous has a plan and a tool to enable its users to vacate its system. The whole mess bums me out thought. While not a prolific blogger, I really enjoyed the service and found their original model of email-to-blog profoundly simple and elegant. The problem is Posterous was a service without a plan or stream of income.</p>
<p>As a developer you can build cool stuff, but without a way to pay for the commodities needed to run it you wind up operating at someone else's mercy. So when they get tired of their failed investment they either shut you down or sell you off, throwing the entire product you've been working on up in the air. In the case of Posterous, Twitter wanted awesome development talent. I get that. Having functioned on the hiring side of software development I can tell you inconclusively it is tough to find top notch developers. So it makes sense to me that rather than search for them Twitter would just buy them.</p>
<p>Unfortunately the fiscal irresponsibility of Posterous has left it's users in a lurch. I don't blame their CEO for selling, I blame him for starting the product in the first place. If I were him, making no money on my product, I would sell too. Why not? Better to sell then to fizzle away into irrelevance. People have to start thinking about this when they start a tech company. They need to develop with a business plan, not hope that one catches up to them later. Have a great idea for a start up? Awesome! Please don't build it until you can pay for it or at the very least know how you are going to pay for it.</p>
<p>The worst part of a closure like this is that it breeds distrust. What services can I put my information on without worrying about them closing up? Will said service hold my data hostage from me when they do shutdown? And what obligations does a company like Posterous have to my privacy once they have closed the door. These questions only cause me to hold my breath every time a new service pops up. Yeah, it may look cool - but is it worth the risk as a user? What this in turn does is hurt the legitimate business that has an awesome idea and a business plan. That to me is just sad.</p>
</description>
        <pubDate>Sat Apr 27 2013 14:47:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/04/27/the-demise-of-posterous/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/04/27/the-demise-of-posterous/</guid>
        
      </item>
    
      <item>
        <title>jGrowl on cdnjs</title>
        <description><p><a href="https://github.com/stanlemon/jGrowl">jGrowl</a> is officially on <a href="http://cdnjs.com">cdnjs</a>.  This means that if you want to use <a href="https://github.com/stanlemon/jGrowl">jGrowl</a> you don't even have to download it anymore.  Simply add this code to your page and get started:</p>
<p>https://gist.github.com/stanlemon/5382662</p>
<p>Looking for a full-fledged example, checkout:</p>
<p>https://gist.github.com/stanlemon/5382659</p>
<p><a href="http://jsbin.com/iqipox/1/edit"><strong>Or click here to try it out on JS Bin right now!</strong></a></p>
<p>Many thanks to the good folk at <a href="https://www.cloudflare.com">CloudFare</a> for <a href="http://cdnjs.com">cdnjs</a>!</p>
</description>
        <pubDate>Sun Apr 14 2013 13:08:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/04/14/jgrowl-on-cdnjs/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/04/14/jgrowl-on-cdnjs/</guid>
        
      </item>
    
      <item>
        <title>jGrowl 1.2.12 and cdnjs PR</title>
        <description><p>As promised, with 100+ stargazers on GitHub <a href="https://github.com/cdnjs/cdnjs/pull/1167">I've submitted a pull request</a> to <a href="http://cdnjs.com">cdnjs</a> from <a href="https://www.cloudflare.com">CloudFare</a> for <a href="http://github.com/stanlemon/jGrowl">jGrowl</a>. Before doing so I made a minor release update to jGrowl. There are no functional changes in 1.2.12, however I did improve the README to include documentation on the various configuration options and I also added a compressed version of the library with a source map.  If you don't know what a source map is <a href="https://www.google.com/search?q=javascript+source+map">I suggest you google it</a>, because they're pretty awesome.</p>
</description>
        <pubDate>Fri Apr 12 2013 20:21:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/04/12/jgrowl-1-2-12-and-cdnjs-pr/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/04/12/jgrowl-1-2-12-and-cdnjs-pr/</guid>
        
      </item>
    
      <item>
        <title>jGrowl in Chrome Extension</title>
        <description><p>The other day someone on StackOverflow asked how to integrate <a href="http://github.com/stanlemon/jGrowl">jGrowl</a> into a Chrome extension.  They had a pretty good start, but missed some important details.  I've uploaded a complete working Chrome extension with jGrowl to Github as part of my response to the question.</p>
<p>The question can be found here: <a href="http://stackoverflow.com/questions/15870797/jgrowl-issue-in-chrome-extension">http://stackoverflow.com/questions/15870797/jgrowl-issue-in-chrome-extension</a></p>
<p>The GitHub repository with the example implementation can be found here: <a href="https://github.com/stanlemon/jgrowl-chrome-ext">https://github.com/stanlemon/jgrowl-chrome-ext</a></p>
</description>
        <pubDate>Fri Apr 12 2013 09:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/04/12/jgrowl-in-chrome-extension/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/04/12/jgrowl-in-chrome-extension/</guid>
        
      </item>
    
      <item>
        <title>What is it that I do?</title>
        <description><p>I get asked a lot what I do for a living.  I've responded in a variety ways, &quot;I'm a developer&quot;, &quot;I'm a software engineer&quot;, &quot;I write web applications&quot;, &quot;I'm an application architect&quot;, etc. Usually people respond by smiling, nodding their head and then professing that they have no idea what that means but they figure it's important.  The truth is I'm not just a &quot;developer&quot; or an &quot;architect&quot;.  I do deal with a fair amount of architectural things, design related things and a myriad of operational things too.  Tonight I realized one way in which I can illustrate what it is I do...  Think of when you buy a new computer.  You invest a lot of time in setting that new computer up.  You transfer files from your old computer, you setup your email, install software, configure your software, etc. My job is to do all of those steps you take to setup your computer and do it in one step, the push of a button. So I spend part of my day trying to figure out how to setup the systems that your favorite web software runs on in a single step.</p>
</description>
        <pubDate>Fri Apr 05 2013 01:52:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/04/04/what-is-it-that-i-do/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/04/04/what-is-it-that-i-do/</guid>
        
      </item>
    
      <item>
        <title>Stargazing jGrowl</title>
        <description><p>I get a fair number of emails about jGrowl each week. Two common requests are 1.) Can you include a compressed version? 2.) Do you have a CDN?</p>
<p>I used to ship a compressed version, but quite honestly I always forgot to update it so I wound up removing it. Plus, it never seemed like I was using the right one, as I was always getting suggestions to try a different compression process. Nonetheless I am willing to give this another shot, but with a specific purpose...</p>
<p>CloudFare has their <a href="cdnjs.com">cdnjs.com</a> site which is an awesome contribution to the community for providing a CDN for all of the other JavaScript libraries you want to use. CloudFare's cited criteria for putting a library up is 100 stargazers on github. So if you are reading this and either like, use or just admire jGrowl do me a favor and go star it over on github. If we reach 100 stargazers I'll submit a request to cdnjs.com and see if we can't get a compressed version of the library up on a CDN.</p>
</description>
        <pubDate>Tue Mar 26 2013 11:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/03/26/stargazing-jgrowl/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/03/26/stargazing-jgrowl/</guid>
        
      </item>
    
      <item>
        <title>Premature Jesus</title>
        <description><p>Normally on March 25th the church celebrates the Annunciation, when Mary is told that she will conceive and carry the Son of God in her womb. Typically this falls during Lent, which at first glance can seem odd, but then we remember a baby normally bakes for nine months, and nine months from now is Christmas... Well then it all adds up. Here's the thing though... This year Jesus is going to be premature when Christmas comes around. He's gonna bake about two weeks less this year because March 25th falls in the Monday of Holy Week. I'm told this would normally transfer the festival to after Holy Week, because nothing trumps Holy Week. But then there is the Octave of Easter and you can't do the Sunday after Easter because Sundays during the seasons of Easter are privileged. So the Monday one week after Easter becomes the day we celebrate the Annunciation. That's April 8th, the Monday of Quasimodo Geniti if you weren't tracking yet.</p>
<p>I've been trying to think of how to adjust the algorithm on <a href="http://sanctus.org">Sanctus.org</a> to make this happen and quite frankly I think I'm going to take a Mulligan. Transferring a festival one day, I can handle, but transferring it two weeks and across a month presents some challenges. Nonetheless, in full disclosure I wanted to make it known that if you're looking around for the Annunciation you won't find it on Sanctus.org this year. Never fear though, <a href="http://higherthings.org">Higher Things</a> has you covered with <a href="http://higherthings.org/reflections/lent2013/2013-03-25">an awesome Reflection for the Annunciation</a>.</p>
</description>
        <pubDate>Mon Mar 25 2013 11:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/03/25/premature-jesus/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/03/25/premature-jesus/</guid>
        
      </item>
    
      <item>
        <title>Percona, MySQL and Puppet</title>
        <description><p>MySQL is one of the most widely used database servers for web development.  It's <em>free</em>, has a wide range of support and is easy to get up and going.  Add to this native bindings in just about every language and you've got a pretty powerful databasing tool at your hands.  <a href="http://www.percona.com">Percona</a> is a MySQL consulting company with a super-awesome distribution of MySQL tuned for performance. For the most part Percona packages should be a drop-in replacement with MySQL. When it comes to system administration tasks I like to throw <a href="https://puppetlabs.com">Puppet</a> at the problem, it makes it easier to replay the configuration down the road and I can track the configuration changes in git. But there's a problem when you change the package name for the defacto-standard <a href="https://github.com/puppetlabs/puppetlabs-mysql">Puppet MySQL module</a>.  The referencing of the service and the default pid file in the Percona distribution and subsequently the reload following install fails, as well as anything downstream of those items. This was unsatisfactory to me so I poked around to figure out a way to make this work, <a href="http://projects.puppetlabs.com/issues/19562">despite the bug in module</a>. Below is a Puppet manifest with some hackey'ness if you're using Percona that will get it working and allow you to use the rest of the Puppet MySQL module without problems.</p>
<p>https://gist.github.com/stanlemon/5178407</p>
</description>
        <pubDate>Sun Mar 24 2013 10:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/03/24/percona-mysql-and-puppet/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/03/24/percona-mysql-and-puppet/</guid>
        
      </item>
    
      <item>
        <title>MySQL Strict Mode on OS X</title>
        <description><p>If you are a web developer on OS X you probably are sporting your own installation of your database server.  If you are running MySQL you might be haunted by strict mode.  MySQL has modes <a href="http://dev.mysql.com/doc/refman/5.1/en/server-sql-mode.html">as documented here</a> that effect the behavior of various parts of the system.  In strict mode values do not get casted between types, which is where I ran into issues.  My favorite ORM was passing a boolean <em>true</em> into a <em>tinyint(1)</em> and causing the transaction to abort.  This is thanks to <a href="http://dev.mysql.com/doc/refman/5.1/en/server-sql-mode.html#sqlmode_strict_trans_tables">STRICT_TRANS_TABLES</a> in my case.  The first thing I checked was my <em>/etc/my.cnf</em> to see if &quot;sql_mode&quot; was set in the [mysqld] section.  It was not.  So I tried setting it to something other than <em>STRICT_TRANS_TABLES</em> and restarted MySQL.  No luck, the setting was still on.  After a lot of poking around I found out that MySQL for OS X from Oracle ships with a <em>/usr/local/mysql/my.cnf</em> which is loaded on startup. In this file is a sole configuration directive for <em>sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES.</em>  Once I commented this out and restarted the server strict mode was off, my ORM worked and I was happy.</p>
</description>
        <pubDate>Sat Mar 23 2013 10:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/03/23/mysql-strict-mode-on-os-x/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/03/23/mysql-strict-mode-on-os-x/</guid>
        
      </item>
    
      <item>
        <title>Composer on OpenShift</title>
        <description><p>Yesterday I talked about running <a href="http://getcomposer.org">composer</a> on Amazon's Elastic Beanstalk.  There it is builtin and works out of the box for you.  If you are on <a href="http://openshift.com">OpenShift</a> (my preferred PaaS) composer does not come out of the box.  <a href="http://www.mwop.net">Matthew Weier O'Phinney</a> has posted an article on the steps he took to get composer installing his project's dependencies, and that's definitely a worthy read.  However, my deployment hook for OpenShift is a little bit different and I wanted to share that.</p>
<p>There were two things I wanted to accomplish.  First, I did not want <em>composer.phar</em> in source control.  Second, I wanted to take advantage of composer's ability to cache dependencies to speedup my deployment process up.  So here is what I use in my <em>./.openshift/action_hooks/deploy</em> script:</p>
<p>https://gist.github.com/stanlemon/5177925</p>
<p><em>As a bonus here's a tip about markers... OpenShift will restart Apache and Zend Server with every deployment. You may not want or need to do this. If you don't, simply touch a file to ./.openshift/markers/hot_deply and then next time you push your changes up OpenShift will leave all those services running when it deploys.</em></p>
</description>
        <pubDate>Fri Mar 22 2013 10:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/03/22/composer-on-openshift/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/03/22/composer-on-openshift/</guid>
        
      </item>
    
      <item>
        <title>Composer on Elastic Beanstalk</title>
        <description><p><a href="http://aws.amazon.com/elasticbeanstalk/">Amazon's Elastic Beanstalk</a> is another git-driven deployment service, this time directly to EC2 and RDS instances on Amazon Web Services.  It's similar to what Red Hat is doing with OpenShift conceptually.</p>
<p>If you are a PHP developer like myself your first question is probably, will it install my <a href="http://getcomposer.org">composer dependencies</a> for me?  The answer is <strong>YES</strong>.</p>
<p>Here's the kicker, and quite frankly this does not make any sense to me...  If you have stubbed your <em>vendor</em> folder in place, so you've either touched <em>./vendor/empty</em> or <em>./vendor/.gitkeep</em>, you are going to have to removed it.  Elastic Beanstalk will use composer based upon the presence of a <em>composer.json</em> or <em>composer.lock</em> file, but if it sees the <em>vendor</em> folder it bails out and doesn't execute the install command. Again, I really don't know why this is and I could not find any documentation about it.  Yet this exactly what I needed to do to get my dependencies installed.</p>
</description>
        <pubDate>Thu Mar 21 2013 10:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/03/21/composer-on-elastic-beanstalk/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/03/21/composer-on-elastic-beanstalk/</guid>
        
      </item>
    
      <item>
        <title>Square Footage</title>
        <description><p>When we first started house hunting in Indiana I was grateful that MLS listed the total square footage of homes. Back in Pittsburgh MLS didn't do this and we always found that a bit puzzling.  In our (original) assessment it was easier to see if a house had the mass we needed for our family based upon this number.</p>
<p>Fast forward and I now realize why it's probably more advantageous to <strong>not</strong> have square footage on MLS. Having it seems to lessen the requirement for a complete set of room dimensions.  Worse yet, there is no consistent way of doing square footage.</p>
<p>We've seen a lot of places that use the footprint of the house, then multiply it by the number of finished floors.  We've seen places that appear to have legitimate footage values for livable space, but these are few and far between.  We actually saw one place where the sellers had taken the foot print, added that same amount to the total for an unfinished half-basement and then added the same for the second floor that was smaller then the base and then they added the total footage of the garage to it for the size of the bonus room above the garage which turned out to have knee walls and be smaller then the garage. That house's total footage was probably half of what was listed and made for a horrible misrepresentation of the house. It was misleading and confusing.  When livable space is actually the metric being used you often also have to wonder which rooms are being counted or not. Taking a list of houses and comparing them based upon square footage just does not give you an accurate representation of what space is available.</p>
<p>All in all there is just no better trade off then a decent set of room measurements for every livable space in the house.</p>
</description>
        <pubDate>Wed Mar 20 2013 10:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/03/20/square-footage/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/03/20/square-footage/</guid>
        
      </item>
    
      <item>
        <title>Naked Domain Workaround</title>
        <description><p>I've become a pretty big fan of Red Hat's <a href="http://openshift.com">OpenShift</a> platform.  I <strong>love</strong> the idea of doing deployments based off of DVCS operations. Almost two years ago when I was working for Wizzard Software we came up with a deployment process not to far off from this concept.  We were a Mercurial based team so the DVCS system was different, but we basically issuing pull's from repositories on the effected systems and out rolled new software that way.  OpenShift is a whole lot better then that though, because it's push triggered and deploys to the cloud and Red Hat has a bunch of awesome hooks tied in to make it even more powerful.  Did I mention it's <em>FREE</em>?  Yes, free hosting driven by git in the cloud - it doesn't get much better then this!</p>
<p>But what happens if you want to add a custom domain name to <a href="http://openshift.com">OpenShift</a>?  In order to do this you have to do two things, first add the appropriate aliases to your <a href="http://openshift.com">OpenShift</a> application, <a href="https://openshift.redhat.com/community/blogs/custom-url-names-for-your-paas-applications-host-forwarding-and-cnames-the-openshift-way">see here for more information</a>. Second is to edit your DNS records and add CNAME records to point to the OpenShift subdomain for your application.  As with many things in the cloud, IP addresses are ever-changing so you cannot count on them when setting up your domain.  If you're lucky enough to have <a href="http://namecheap.com">NameCheap</a> as your registrar this isn't a problem, because they let you add a CNAME record as your apex (not sure how they do this, but just go with it... it works!). If you are on <a href="http://godaddy.com">GoDaddy</a> or a similar DNS service (like <a href="http://aws.amazon.com/route53/">Route 53</a>) you aren't so lucky.</p>
<p>Fortunately, Satoru systems has a naked domain redirect service <em>over at <a href="http://wwwizer.com">wwwizer</a></em> that fills this need.  They basically give you an IP address to use for your A record and their system automatically redirects it to &quot;www.domain.com&quot; where &quot;domain.com&quot; is the apex entry. It's dead simple to use. Best of all, this too is <em>FREE</em>.</p>
<p>As with all cloud systems, you never know how long you can get these services before they are bought out, shutdown or just run out of money, so don't use them with mission critical systems. But if you're a hobbyist or have a pet-project this is a great way to get it out on the web without incurring a lot of costs.</p>
<p><a href="http://wwwizer.com/naked-domain-redirect">Check out wwwizer's naked domain redirect service.</a></p>
</description>
        <pubDate>Tue Mar 19 2013 10:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/03/19/naked-domain-workaround/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/03/19/naked-domain-workaround/</guid>
        
      </item>
    
      <item>
        <title>Mailbox & Dropbox Sitting in a Tree</title>
        <description><p><a href="http://www.mailboxapp.com">Mailbox</a> has garnered a lot of attention since it rolled out.  My concern from day 1, as has been with many a similar service, is how is it being paid for?  These startup services rollout free with no plan in place to make money.  Some of these startups are gunning to be bought out or &quot;<em>funded</em>&quot; by venture capitalists, and others are hoping for bright lights and a revelation on high to show them the secret to success (here's looking at you Twitter).  The truth is they lack a plan to become financially solvent and while cloud computing is cheaper then the alternative, it's still expensive.  It's no wonder then that these startups belly-up or disappear into the annals of the world wide web. I've been particularly upset about two as of late, <a href="http://blog.posterous.com/thanks-from-posterous">Posterous</a> a year ago and more recently <a href="http://www.sparrowmailapp.com">Sparrow</a>. In both of these cases the buyouts were about grabbing talent and had nothing to do with building the product.  In the end the consumers got screwed by dreams too big to pay be paid for.</p>
<p>So I can't help but wonder what will happen with <a href="http://www.mailboxapp.com">Mailbox</a>.  An announcement was just recently made that cloud-sync kingpin <a href="https://blog.dropbox.com/2013/03/welcome-mailbox/">Dropbox has bought them</a>. I should disclose that I do have a Mailbox account and that I have not completely bought into their way of doing Email just yet.  I'm not trying to knock it, it's just a dramatic change from the way I've managed my inbox and I am still adjusting.  I'm giving it a shot though.  <a href="http://db.tt/eLppmBW">I should also disclose that I am huge fan of Dropbox.</a>  Nonetheless I can't help but wonder what Dropbox's purpose is in buying Mailbox.  To the best of my knowledge there is no income stream for Mailbox, only what I am speculating is an ever-growing <a href="http://aws.amazon.com/ec2">EC2</a> bill.  The product models are completely different too.  So is it a talent grab?  It doesn't seem so, at least Dropbox's post does not give that indication.  Nonetheless I am skeptical...</p>
<p>I wouldn't count on Mailbox being eternally available. I hope I'm wrong, but I feel like we've learned all too recently <a href="http://www.usatoday.com/story/tech/personal/2013/03/13/google-reader-shutdown/1986337/">not to depend on free cloud services</a> for the kitchen sink.  Our data needs to be portable and we as consumers need to be startup-proof.  That means go ahead and use a service like Posterous, but make sure you can walk away from it when they shut it down.  And if they don't offer data portability, don't sign up.  With services like Mailbox that augment the way you do things, just make sure you can still function when they are gone.  In short:  <em>D__on't put all your eggs in one basket, be startup-proof</em>.</p>
</description>
        <pubDate>Mon Mar 18 2013 10:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/03/18/mailbox-dropbox-sitting-in-a-tree/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/03/18/mailbox-dropbox-sitting-in-a-tree/</guid>
        
      </item>
    
      <item>
        <title>Thoughts on Google's Spring Cleaning</title>
        <description><p><a href="http://googleblog.blogspot.com/2013/03/a-second-spring-of-cleaning.html">Google announced its latest round of spring cleaning.</a>  The most troubling part of the news announcement is the loss of Google Reader.  I've been using Reader since 2005 when it first started. I had tried a variety of one-off RSS readers prior to it and Google Reader was perfect for me because it was &quot;<em>in the cloud&quot;</em> before that was even in-vogue. Fast forward eight years and I'm still maintaining the same list of feeds, though now I consume it through native app clients on the Mac, iPhone and iPad. I haven't used the actual web site for it in a long time.</p>
<p>A lot of people are worried about what will happen when Reader shuts it's doors. <a href="https://www.change.org/petitions/google-keep-google-reader-running">There is even a big online petition going to ask Google to keep the service.</a> Some have predicted that this will be the end of RSS as we know. Quite frankly I'm not too worried about losing Google Reader.  My list of feeds has thinned out over time as I've begun using services like Twitter more.  Where I once subscribed to feeds for news and sports I am now following various outlets on twitter. Most of my friends who still blog tweet when they post to, and quite often I am clicking over to an article because I saw it on a tweet first. That being said RSS still has it's place in my mind. Not everyone does the twitter thing and they shouldn't have to. The best part of RSS is still that it's an open and parsable standard.  It's friend OPML is great and also pretty portable.  These are two things Twitter won't give you.</p>
<p>So what am I going to do?  Mostly wait.  I've been using <a href="http://reederapp.com">Reeder</a> for consuming Google Reader data for a long time now and the developer of that fantastic app says <a href="https://twitter.com/reederapp/status/311995748482945025">it's not going away just because Google Reader is</a>.  This gives me hope that Marco Arment might be right and that this is an <a href="http://www.marco.org/2013/03/13/google-reader-sunset">opportunity for guys to build new replacement service</a>.</p>
</description>
        <pubDate>Sun Mar 17 2013 11:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/03/17/thoughts-on-googles-spring-cleaning/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/03/17/thoughts-on-googles-spring-cleaning/</guid>
        
      </item>
    
      <item>
        <title>jGrowl 1.2.11</title>
        <description><p>I released a small updated to jGrowl today that fixes an issue when triggering the shutdown method (thank you <a href="https://github.com/jupereira0920">Joana</a> for reporting it!), basically the multi-notification closer would be left behind (though not visible) and remain in limbo. The fix cleans out all nodes in the container emptying it completely out upon shutdown.  I've also cleaned up text artifacts, space/tab discrepancies and extra space at the end of lines as well.</p>
<p>If you hadn't noticed yet, jGrowl moved from BitBucket over to GitHub when jQuery rolled out their new plugin registry.  They've got a pretty neat system for updating a plugin's page off of a manifest file in the git repository.  The move to GitHub has also been nice because it's resulted in several outside contributors issuing pull requests (thank you <a href="https://github.com/serzhenko">Dimitry</a> and <a href="https://github.com/ArtemGovorov">Artem</a>!). If you find a bug, please file it over at GitHub and always feel free to issue a pull request if you have an improvement, bug fix or feature request!</p>
<p><a href="http://plugins.jquery.com/jgrowl/">Check out jGrowl on jQuery Plugin site.</a></p>
<p><a href="https://github.com/stanlemon/jGrowl">Check out jGrowl on GitHub.</a></p>
</description>
        <pubDate>Sun Mar 17 2013 00:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/03/16/jgrowl-1-2-11/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/03/16/jgrowl-1-2-11/</guid>
        
      </item>
    
      <item>
        <title>The New Sanctus.org</title>
        <description><p>Today I released a new version of <a href="http://sanctus.org">Sanctus.org</a>, my Lutheran lectionary calendar project. I started this project when I was in college at Concordia University, River Forest. I was studying theology and fascinated with liturgics and the church year. The project started with the purpose of assisting our dorm in planning our daily prayer services and quickly evolved into something bigger as other people gained interest in it as well. Today's release is the third time I have rewritten the site. Today's code is deployed on Red Hat's <a href="http://openshift.com">OpenShift</a> platform and I am using <a href="http://www.zend.com/en/products/server/">Zend Server</a>'s page cache and data cache to keep things fast. The new layout utilizes Twitter's <a href="http://twitter.github.com/bootstrap/">Bootstrap</a> library for a nice responsive design. Under the hood the actual calculation algorithm has been open sourced and can be found on <a href="http://github.com/stanlemon/lectionary">GitHub</a>, the rest of the plumbing is <a href="http://www.slimframework.com">Slim</a>, <a href="http://doctrine-project.org/">Doctrine</a> and <a href="http://twig.sensiolabs.org">Twig</a> respectively. I've also restructured a good portion of the persistence layer to be more normalized and it runs on MySQL instead of SQLite too.  All in all I think it's a better piece of software then it was. I hope you enjoy the new look, faster response times and all around better experience of using <a href="http://sanctus.org">Sanctus.org</a>.  <a href="/contact">Feel free to leave me some feedback on the redesign</a>.</p>
<p><a href="http://revborghardt.wordpress.com"><em>And as always... special thanks to Pastor Borghardt for donating the domain name sanctus.org!</em></a></p>
</description>
        <pubDate>Sat Mar 16 2013 01:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/03/15/the-new-sanctus-org/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/03/15/the-new-sanctus-org/</guid>
        
      </item>
    
      <item>
        <title>Fairwell BlogSCL</title>
        <description><p>In the summer of 2004 I was a single college student with far too much free time on my hands. I had started writing web software in 2002 with my friend Erich Musick, now a super-star developer ninja at Microsoft.  At the time we were focussed on making plain old websites and solving the difficult challenges of managing content with consistent templates and automatic linking.  Life was easy back then.  Erich had this nifty news manager system written in Perl and he used it like a blog.  Meanwhile I was conquering server side includes while rigging together Apache on my Windows XP laptop.  Again, life was easy. Always striving to be unique I took a different path and started exploring PHP.  I had a singular goal of replicating Erich's new manager in my own special way.  What resulted was a rickety and clunky news management system that ran a pseudo-blog on my website into the summer of 2003.</p>
<p>In the summer of 2003 my coding skills were getting better and I rewrote my news manager and it materialized as the first version of what I affectionately called BlogSCL.  Those letters, S-C-L, belong to me - they're my initials.  Blogging was new back then, there was no wordpress.com and blogger wasn't owned by Google, in fact it was some hackie CGI scripts you would upload to your own server and hope worked. I was determined to turn BlogSCL into something cool and so I rigged together a basic way for people to sign up.  After all, I had a shared hosting account on some ghetto-fabulous server costing me almost nothing and it has unlimited space on it.</p>
<p>In early 2004 I became involved with an organization called Higher Things. It was a Lutheran Youth Organization and they had a website but it stunk.  They wanted something better and I was cheap, as in free. One of the things they wanted was a better way to manage news, so I introduced them to my super awesome BlogSCL platform. It worked and they were happy, but then some of the staff wanted their own blogs.  I began building out BlogSCL like crazy, adding comments, pingbacks, trackbacks, captcha, categories, pages and just about anything I could think of.  If I saw it on one of the up and coming blogging platforms I pulled it into mine.</p>
<p>But the first version of BlogSCL was difficult to maintain and I had learned a lot, including how to write object oriented software.  I decided to rewrite it from the ground up and open up public signups. A half a bottle of tequila and a long night yielded the first working version of BlogSCL2, which served as the basis for the platform as I built it out over the next two years. Seven years later I am finally pulling the plug on the last of the BlogSCL blogs. I have just wrapped up migrating the Higher Things blogs to wordpress.com.    You might be wondering, why?  Well, it wasn't for the outstanding quality of wordpress code - that's for sure. There were a couple of reasons though, firstly I don't have the time to be spending developing a blogging platform when there are others out there being actively developed by large communities (yes, I'm looking at you wordpress!).  Secondly, wordpress has a pretty simple format for exporting and importing and it was easy to write an exporter from BlogSCL to it.  Thirdly, while under the hood wordpress is nothing to gawk over it does have a robust UI, expansive plugin system, far reaching hosting service and an iOS app to boot.</p>
<p>As a developer I constantly want to write my own stuff.  Not necessarily because I think I can do better (though I can), but because I enjoy the challenge.  Getting BlogSCL to the point it as was a challenge and it forced me to learn how to become a better developer.  I'm very grateful for the learning exercise and also happy that it was able to get used by Higher Things as long as it did.</p>
</description>
        <pubDate>Fri Mar 15 2013 01:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/03/14/fairwell-blogscl/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/03/14/fairwell-blogscl/</guid>
        
      </item>
    
      <item>
        <title>Welcome to GovCloud</title>
        <description><p>Amazon Web Services is like the godfather of cloud computing.  In PCI or HIPPA/HI-TECH compliant environments though it doesn't quite cut it.  There are a bunch of fancy letters indicating various certifications that seal the compliance deal for those looking to provide services in the cloud under those regulations.  Fortunately Amazon developed the GovCloud as a compliant region to meet those needs.  GovCloud requires special approval from Amazon to get started with it.  I've been &quot;tinkering&quot; around with GovCloud for a little while now and have come across some <em>gotchas</em> that I wanted to document and share, if for no other reason then to save the next poor soul from all that googling around...</p>
<p><strong>1. Web Interface</strong></p>
<p>If it's not clear from the website, don't be surprised: <strong>GovCloud does not have a web interface to it.</strong>  All of the fancy tools that us EC2-lovers have grown accustomed to in the East and West regions are out of luck.  In GovCloud you have to use either the command line tools (all umpteen trillion of them) or you have to use a tool called <a href="http://www.elasticwolf.com">ElasticWolf</a>. ElasticWolfe is a decent tool, when it works... and that right there is the problem with it.  I've filed three tickets as of the writing of this post, and while turn around has been fast, I don't feel like I can trust it to do what I need, whenever I need it.  So get comfortable with the command line, as that's your primary place of operation in the GovCloud.  Don't worry though... it's only intimidating at first, you'll get used to it!</p>
<p><strong>2. White Listed Load Balancing</strong></p>
<p>This was not disclosed to me upfront, but apparently the Elastic Load Balancing service has some sort of separate white list you need to be on when joining GovCloud.  Quite honestly this doesn't make sense, but nonetheless I found myself with everything working except the Elastic Load Balancer and when I finally appealed to my GovCloud sales rep, she directed me to a nice (and hardly responsive) technician who told me I needed to be white listed. Rumor is he took care of white listing my account, and while I now have an Elastic Load Balancer up and working in the GovCloud I am still waiting to hear from my Support Technician at Amazon. So if you want to use an ELB in GovCloud save yourself the time and trouble and pre-empt the white listing by telling your sales rep up front.</p>
<p><strong>3. Elastic Beanstalk</strong></p>
<p>This is a great service that basically powers the automation of a full AWS deployment using git.  It's akin to services like OpenShift from Redhat but with an order of magnitude more power by virtue of the plumbing underneath.  I was stoked when Beanstalk came out because it gave me a standard PHP AMI with RDS, an ELB  and an AS/CW configuration right out of the box.  I had dreams of spinning my service up with <em>git push</em> and then walking away to enjoy a cold beverage of some sort.  Not on GovCloud though.  Despite having ALL of the services that make up the underpinning of Beanstalk, the tools for Beanstalk themselves are not actually configured for the GovCloud region.  This isn't spelled out anywhere clearly and the Beanstalk website is sort of misleading when it describes the service as a management wrapper around existing services.  It seems that there is some dedicated plumbing in there too.</p>
<p><strong>4. Endpoint URLs</strong></p>
<p>Most of the command line tools that Amazon ships are not configured to run with GovCloud out of the box.  You have to change the endpoint URLs for them in order to make magic happen.  Unfortunately try as I might I couldn't find all of the necessary environment variables that needed changing documented anywhere.  The endpoint URL's can be found <a href="http://docs.aws.amazon.com/general/latest/gr/rande.html#govcloud_region">here</a>.  But what variables should you set?  I am not sure I have discovered all of them just yet, but here are the ones I have found and have been using:</p>
<p><code>export EC2_URL=&quot;https://ec2.us-gov-west-1.amazonaws.com&quot;   export AWS_IAM_URL=&quot;https://iam.us-gov.amazonaws.com&quot;   export AWS_CLOUDWATCH_URL=&quot;https://monitoring.us-gov-west-1.amazonaws.com&quot;   export RDS_URL=&quot;https://rds.us-gov-west-1.amazonaws.com&quot;   export AWS_ELB_URL=&quot;https://elasticloadbalancing.us-gov-west-1.amazonaws.com&quot;   export AWS_AUTO_SCALING_URL=&quot;https://autoscaling.us-gov-west-1.amazonaws.com&quot;</code></p>
<p>What threw me for a loop was &quot;EC2_URL&quot; and then &quot;AWS_ELB_URL&quot; and then &quot;RDS_URL&quot; and then &quot;AWS_CLOUDWATCH_URL&quot;... what the rhyme and reason was for when &quot;AWS_&quot; was prefixed is beyond me, but knowing this inconsistency would have saved me some time and I hope it saves you some too!</p>
<p><em>Hopefully there won't be any more surprises in GovCloud, but if they are expect a followup!</em></p>
</description>
        <pubDate>Tue Mar 12 2013 02:00:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/03/11/welcome-to-govcloud/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/03/11/welcome-to-govcloud/</guid>
        
      </item>
    
      <item>
        <title>Goodbye Posterous</title>
        <description><p>Unfortunately as I predicted when Posterous was bought, the product is dying. It's going to get shutdown soon and that leaves those of us who loved it searching for something instead. It's a bummer, but I don't blame Twitter. Rather, I blame the CEO of Posterous and its investors for creating a fantastic product with no way to make money on it. More and more this seems to be the story of Silicon Startups and it really kind of stinks. I find myself at this juncture wanting my next blog solution to be portable and Wordpress seems to fit that ticket. I'm tired of hosting a blog, that's why I went to Posterous in the first place. The fact that Wordpress has a good mobile presence is also a win in my book. So I am going to give this a shot and see what happens.</p>
</description>
        <pubDate>Mon Mar 11 2013 03:46:00 GMT+0000 (Coordinated Universal Time)</pubDate>
        <link>https://stanlemon.com/2013/03/10/goodbye-posterous/</link>
        <guid isPermaLink="true">https://stanlemon.com/2013/03/10/goodbye-posterous/</guid>
        
      </item>
    
  </channel>
</rss>
